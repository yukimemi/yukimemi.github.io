<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on YUKIMEMI</title>
    <link>http://yukimemi.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 25 Sep 2016 23:53:12 +0900</lastBuildDate>
    <atom:link href="http://yukimemi.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Zsh autosuggestions</title>
      <link>http://yukimemi.github.io/post/2016-09-25_zsh-autosuggestions/</link>
      <pubDate>Sun, 25 Sep 2016 23:53:12 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-25_zsh-autosuggestions/</guid>
      <description>&lt;p&gt;&lt;code&gt;zsh-autosuggestions&lt;/code&gt; という便利な &lt;em&gt;zsh&lt;/em&gt; のプラギンを見つけた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zplug&lt;/code&gt; を使って簡単にインストール可能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zplug &amp;quot;zsh-users/zsh-autosuggestions&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは、表示された補完を決定するキーの設定を追加。
ちなみにデフォルトだと、右矢印が割り当てられてる模様。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;bindkey &#39;^ &#39; autosuggest-accept
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、 &lt;code&gt;Ctrl + Space&lt;/code&gt; で、補完候補が確定する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/zsh-autosuggestions.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;べんり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use solarized colorscheme in true color</title>
      <link>http://yukimemi.github.io/post/2016-09-19_Use%20solarized%20colorscheme%20in%20true%20color/</link>
      <pubDate>Mon, 19 Sep 2016 11:15:50 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-19_Use%20solarized%20colorscheme%20in%20true%20color/</guid>
      <description>

&lt;p&gt;前回の記事(&lt;a href=&#34;http://yukimemi.github.io/post/2016-09-19_True%20color%20in%20iTerm2%20Tmux%20Neovim/&#34;&gt;True color in iTerm2 Tmux Neovim | YUKIMEMI&lt;/a&gt;)で、 &lt;code&gt;iterm&lt;/code&gt; と &lt;code&gt;neovim&lt;/code&gt; でtrue colorを使う方法はわかったんだけど、なぜか、 &lt;code&gt;solarized&lt;/code&gt; の &lt;code&gt;colorscheme&lt;/code&gt; が有効にならなかった。&lt;/p&gt;

&lt;p&gt;通常の &lt;code&gt;solarized&lt;/code&gt; ではダメなようで、true color対応したやつを使えばいいみたい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[plugins]]
repo = &#39;lifepillar/vim-solarized8&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme solarized8_dark
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでできた。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/delphinus35/items/b8c1a8d3af9bbacb85b8&#34;&gt;tmux on iTerm2 で斜体 &amp;amp; True Color を使う - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>True color in iTerm2 Tmux Neovim</title>
      <link>http://yukimemi.github.io/post/2016-09-19_True%20color%20in%20iTerm2%20Tmux%20Neovim/</link>
      <pubDate>Mon, 19 Sep 2016 00:30:00 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-19_True%20color%20in%20iTerm2%20Tmux%20Neovim/</guid>
      <description>

&lt;p&gt;今時 &lt;code&gt;macbook&lt;/code&gt; のキレイな画面で256色なんて・・・&lt;/p&gt;

&lt;p&gt;っということで、 &lt;code&gt;True color&lt;/code&gt; が使えるそうなので設定してみた。&lt;/p&gt;

&lt;p&gt;まず、 &lt;code&gt;iTerm2&lt;/code&gt; の設定。&lt;/p&gt;

&lt;p&gt;は特になく、 &lt;code&gt;homebrew cask&lt;/code&gt; でインストールすればそのまま &lt;code&gt;true color&lt;/code&gt; が使えるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install iterm2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;tmux&lt;/code&gt; の設定。
&lt;code&gt;tmux&lt;/code&gt; はバージョン &lt;code&gt;2.2&lt;/code&gt; 以上ならOKっぽい。普通に &lt;code&gt;homebrew&lt;/code&gt; でインストールしたら &lt;code&gt;2.2&lt;/code&gt; だった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、設定ファイル &lt;code&gt;tmux.conf&lt;/code&gt; に以下を追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tmux&#34;&gt;set -ga terminal-overrides &amp;quot;,xterm-256color:Tc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もし、以下の設定が書いてあったらコメントアウト。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tmux&#34;&gt;# set -g default-terminal xterm-256color
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、 &lt;code&gt;neovim&lt;/code&gt; の設定 ( &lt;code&gt;init.vim&lt;/code&gt; )。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;if has(&#39;nvim&#39;)
  set termguicolors
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでOK。
昔の設定は、
&lt;code&gt;let $NVIM_TUI_ENABLE_TRUE_COLOR=1&lt;/code&gt;
とかだったらしいけど、2016/5/11から変わったっぽい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;terminal&lt;/code&gt; で &lt;code&gt;true color&lt;/code&gt; なのすごいべんり。
&lt;code&gt;iTerm2&lt;/code&gt; の &lt;code&gt;colorscheme&lt;/code&gt; に関係せずに &lt;code&gt;vim&lt;/code&gt; の &lt;code&gt;colorscheme&lt;/code&gt; を変えられる。&lt;/p&gt;

&lt;p&gt;設定方法を書いてくれた人たちに感謝。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/delphinus35/items/b8c1a8d3af9bbacb85b8&#34;&gt;tmux on iTerm2 で斜体 &amp;amp; True Color を使う - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sts10.github.io/blog/2015/10/24/true-hex-colors-with-neovim-and-iterm2/&#34;&gt;True HEX Colors with Neovim and iTerm2 - Prevent Default&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>flowtype in vim</title>
      <link>http://yukimemi.github.io/post/2016-09-18_flowtype%20in%20vim/</link>
      <pubDate>Sun, 18 Sep 2016 13:03:18 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-18_flowtype%20in%20vim/</guid>
      <description>

&lt;p&gt;最近 &lt;code&gt;flowtype&lt;/code&gt; という &lt;code&gt;Altjs&lt;/code&gt; があるのを知った。&lt;/p&gt;

&lt;p&gt;facebookが作っているらしく、 &lt;code&gt;typescript&lt;/code&gt; と違って、既存のjavascriptをそのまま使うことも出来、型エラーがあってもコンパイル、実行が出来る。&lt;/p&gt;

&lt;p&gt;導入は &lt;code&gt;npm&lt;/code&gt; で簡単にインストール出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -g flow-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;flowtype&lt;/code&gt; 自体の説明は
&lt;a href=&#34;http://qiita.com/mizchi/items/95ee0101ac22e4b7b662&#34;&gt;型なき世界のためのflowtype入門 - Qiita&lt;/a&gt;
とか、公式の
&lt;a href=&#34;https://flowtype.org/&#34;&gt;Flow | A static type checker for JavaScript&lt;/a&gt;
とか見ればいいと思う。&lt;/p&gt;

&lt;p&gt;んで、公式にも書いてあるように、vimやemacsのプラギンが提供されている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/flowtype/vim-flow&#34;&gt;flowtype/vim-flow: A vim plugin for Flow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;neovim&lt;/code&gt; &lt;code&gt;dein&lt;/code&gt; でのインストール手順。
&lt;code&gt;toml&lt;/code&gt; を使っている前提。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;[[plugins]]
repo = &#39;flowtype/vim-flow&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]
build = &#39;npm install -g flow-bin&#39;
hook_add = &#39;&#39;&#39;
  let g:flow#autoclose = 1
&#39;&#39;&#39;

[[plugins]]
repo = &#39;Shougo/deoplete.nvim&#39;
if = &amp;quot;has(&#39;nvim&#39;)&amp;quot;
on_i = 1
hook_add = &#39;&#39;&#39;
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#omni_patterns = {}
  let g:deoplete#omni_patterns.javascript = &#39;[^. *\t]\.\w*&#39;
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、 &lt;code&gt;deoplete&lt;/code&gt; を使って自動補完が出来、 &lt;code&gt;flowtype&lt;/code&gt; が記述出来た。&lt;/p&gt;

&lt;p&gt;ちなみに、 &lt;code&gt;javascript&lt;/code&gt; の &lt;code&gt;syntax&lt;/code&gt; とかは、以下の設定がいいもよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;[[plugins]]
repo = &#39;pangloss/vim-javascript&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;mxw/vim-jsx&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/yajs.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;maxmellon/vim-jsx-pretty&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/javascript-libraries-syntax.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/es.next.syntax.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/flowtype/vim-flow&#34;&gt;flowtype/vim-flow: A vim plugin for Flow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/maxmellon/items/0e6173cdd51843053839&#34;&gt;vimのECMASCript2015環境をイイ感じにする - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Type sound with Tickeys</title>
      <link>http://yukimemi.github.io/post/2016-09-03_Type%20sound%20with%20Tickeys/</link>
      <pubDate>Sat, 03 Sep 2016 10:56:35 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-03_Type%20sound%20with%20Tickeys/</guid>
      <description>

&lt;p&gt;最近、
&lt;a href=&#34;http://rubikitch.com/2016/08/17/sound-wav/&#34;&gt;Emacsで効果音(SE)を付けて作業効率を3倍にする方法&lt;/a&gt;
という記事を見つけた。&lt;/p&gt;

&lt;p&gt;やっぱ音があった方がやる気が出るし、コードもすらすら書けるのではないか？
僕は形から入るタイプなのである・・・。&lt;/p&gt;

&lt;p&gt;そこで、Emacsと限らず他のものでもすべて音が出るようなソフトはないかと探してみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yingDev/Tickeys&#34;&gt;yingDev/Tickeys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Rust&lt;/code&gt; で書かれてるらしい。&lt;/p&gt;

&lt;p&gt;インストール方法は homebrew cask で一発。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install tickeys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはシステム環境設定のアクセシビリティから許可するだけ。&lt;/p&gt;

&lt;p&gt;起動したら &lt;code&gt;QAZ123&lt;/code&gt; とタイプすることで設定画面が開く。&lt;/p&gt;

&lt;p&gt;音を選択出来るので、 &lt;code&gt;Cherry G80-3000&lt;/code&gt; ってやつにした。
良い音！たくさんタイプしたくなるので、コード書くのが捗ること間違いなし。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.softantenna.com/wp/mac/tickeys/&#34;&gt;Tickeys – メカニカルキーボードのタイプ音を堪能できるMacアプリ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapping with &lt;nowait&gt; option in vim</title>
      <link>http://yukimemi.github.io/post/2016-08-09_Mapping%20with%20%3Cnowait%3E%20option%20in%20vim/</link>
      <pubDate>Tue, 09 Aug 2016 09:58:11 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-08-09_Mapping%20with%20%3Cnowait%3E%20option%20in%20vim/</guid>
      <description>&lt;p&gt;&lt;code&gt;vim&lt;/code&gt; でマッピングをする時に、便利なオプションがあることを最近知った。&lt;/p&gt;

&lt;p&gt;それが &lt;code&gt;&amp;lt;nowait&amp;gt;&lt;/code&gt; オプション。&lt;/p&gt;

&lt;p&gt;例えば、よくやるキーマップの例としてこんなのがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エスケープ2回でハイライト消すっていうマッピング。&lt;/p&gt;

&lt;p&gt;だけど、これを設定した状態で、コマンドウィンドウを &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; で閉じたい場合、&lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; を押下しても、次のマッピングを待っている状態になってしまって、すぐに閉じることができない。&lt;/p&gt;

&lt;p&gt;こんなマッピングをした場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合に、 &lt;code&gt;&amp;lt;nowait&amp;gt;&lt;/code&gt; というオプションを追加することで、 &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; を押下したらすぐにコマンドウィンドウを閉じることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;めちゃめちゃ便利。&lt;/p&gt;

&lt;p&gt;僕の場合、コマンドウィンドウと、Uniteを閉じるのにこのオプションを使っている。&lt;/p&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Cmdwin.
nnoremap : q:i
vnoremap : q:A

&amp;quot; nohlsearch.
nnoremap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;

&amp;quot; Escape cmd win.
au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;

&amp;quot; Escape unite.
au MyAutoCmd FileType unite nmap &amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;Esc&amp;gt; &amp;lt;Plug&amp;gt;(unite_exit)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JScript by ES2015 with webpack x gulp x babel</title>
      <link>http://yukimemi.github.io/post/2016-07-26_JScript%20by%20ES2015%20with%20webpack%20x%20gulp%20x%20babel/</link>
      <pubDate>Tue, 26 Jul 2016 00:58:51 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-07-26_JScript%20by%20ES2015%20with%20webpack%20x%20gulp%20x%20babel/</guid>
      <description>

&lt;p&gt;JScriptをES2015で書こう！！&lt;/p&gt;

&lt;p&gt;・・・今更なJScriptだけれども、まだまだWindowsでは使えるはず。
いや、仕方なく仕事では使わなきゃいけない場面が多々ある。&lt;/p&gt;

&lt;p&gt;最近はpowershellをよく使っていたけれども、書いてて楽しいのはやっぱりjavascriptの方が上。
でもどうせ書くなら、ES2015で書きたい！！&lt;/p&gt;

&lt;p&gt;そこで、babelやらwebpackやらgulpやらを駆使してやってみた。&lt;/p&gt;

&lt;p&gt;ディレクトリ構成はこんなの。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tree -I node_modules
.
├── src
│   ├── foo.js
│   └── bar.js
├── dst
│   ├── foo.cmd
│   └── bar.cmd
├── .babelrc
├── package.json
├── gulpfile.babel.js
└── webpack.config.babel.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろインストール。(こんだけやったか定かじゃないけど・・・&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -D babel babel-loader babel-preset-es2015-loose es3ify-webpack-plugin gulp gulp-cli gulp-convert-encoding gulp-eol gulp-header gulp-plumber gulp-rename gulp-watch webpack webpack-stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; はこんな感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;jscript&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;gulpfile.babel.js&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {},
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;babel-core&amp;quot;: &amp;quot;^6.9.1&amp;quot;,
    &amp;quot;babel-loader&amp;quot;: &amp;quot;^6.2.4&amp;quot;,
    &amp;quot;babel-plugin-transform-es2015-ie8-classes&amp;quot;: &amp;quot;^0.1.8&amp;quot;,
    &amp;quot;babel-polyfill&amp;quot;: &amp;quot;^6.9.1&amp;quot;,
    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.9.0&amp;quot;,
    &amp;quot;babel-preset-es2015-loose&amp;quot;: &amp;quot;^7.0.0&amp;quot;,
    &amp;quot;babel-preset-es2015-loose-ie8&amp;quot;: &amp;quot;0.0.4&amp;quot;,
    &amp;quot;es3ify-webpack-plugin&amp;quot;: &amp;quot;0.0.0&amp;quot;,
    &amp;quot;es5-shim&amp;quot;: &amp;quot;^4.5.8&amp;quot;,
    &amp;quot;gulp&amp;quot;: &amp;quot;^3.9.1&amp;quot;,
    &amp;quot;gulp-cli&amp;quot;: &amp;quot;^1.2.2&amp;quot;,
    &amp;quot;gulp-convert-encoding&amp;quot;: &amp;quot;^1.0.0&amp;quot;,
    &amp;quot;gulp-eol&amp;quot;: &amp;quot;^0.1.2&amp;quot;,
    &amp;quot;gulp-header&amp;quot;: &amp;quot;^1.8.7&amp;quot;,
    &amp;quot;gulp-plumber&amp;quot;: &amp;quot;^1.1.0&amp;quot;,
    &amp;quot;gulp-rename&amp;quot;: &amp;quot;^1.2.2&amp;quot;,
    &amp;quot;gulp-replace&amp;quot;: &amp;quot;^0.5.4&amp;quot;,
    &amp;quot;gulp-watch&amp;quot;: &amp;quot;^4.3.9&amp;quot;,
    &amp;quot;imports-loader&amp;quot;: &amp;quot;^0.6.5&amp;quot;,
    &amp;quot;json3&amp;quot;: &amp;quot;^3.3.2&amp;quot;,
    &amp;quot;lodash&amp;quot;: &amp;quot;^3.10.1&amp;quot;,
    &amp;quot;moment&amp;quot;: &amp;quot;^2.14.1&amp;quot;,
    &amp;quot;webpack&amp;quot;: &amp;quot;^1.13.1&amp;quot;,
    &amp;quot;webpack-stream&amp;quot;: &amp;quot;^3.2.0&amp;quot;
  },
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;gulp&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;gulp watch&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いらないのあるかもしれない。
ポイントとしては、 &lt;code&gt;lodash&lt;/code&gt; を使いたい場合、Version 4.0 以降はie8以下に対応してないので、(つまりJScriptも不可) あえてVersionをダウンさせる。&lt;/p&gt;

&lt;p&gt;次に &lt;code&gt;webpack&lt;/code&gt; の設定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webpack.config.babel.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import path from &#39;path&#39;;
import encodingPlugin from &#39;webpack-encoding-plugin&#39;;
import es3ifyPlugin from &#39;es3ify-webpack-plugin&#39;;
import webpack from &#39;webpack&#39;;

const src = path.join(__dirname, &#39;src&#39;);

export default {
  entry: {
    foo: path.join(src, &#39;foo.js&#39;),
    bar: path.join(src, &#39;bar.js&#39;)
  },
  output: {
    path: path.join(__dirname, &#39;dst&#39;),
    filename: &#39;[name].js&#39;
  },

  module: {
    loaders: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: &#39;babel-loader&#39;
      }
    ]
  },
  resolve: {
    extensions: [&#39;&#39;, &#39;.js&#39;]
  },
  plugins: [
    new es3ifyPlugin(),
    new webpack.ContextReplacementPlugin(/moment[\\\/]locale$/, /^\.\/(en|ja)$/),
  ]

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スクリプトってのはその場でちょーっと書くものだから、一つじゃなくてentry pointは複数にしてる。
ポイント？としては、 &lt;code&gt;es3ify-webpack-plugin&lt;/code&gt; で、es3へダウンコンパイル？させてることと、 &lt;code&gt;moment.js&lt;/code&gt; を使う場合、そのままではwebpackが全ロケールを読みこんじゃうんで、一部だけ読み込むようにしてるところ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt; でばべる時の設定で、JScriptとして使えるようにするために(IE8以下対応) &lt;code&gt;.babelrc&lt;/code&gt; の設定をする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;presets&amp;quot;: [
    &amp;quot;es2015-loose&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで、これが &lt;code&gt;gulp&lt;/code&gt; の設定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gulpfile.babel.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import gulp from &#39;gulp&#39;;
import encoding from &#39;gulp-convert-encoding&#39;;
import eol from &#39;gulp-eol&#39;;
import plumber from &#39;gulp-plumber&#39;;
import watch from &#39;gulp-watch&#39;;
import rename from &#39;gulp-rename&#39;;
import header from &#39;gulp-header&#39;;
import webpack from &#39;webpack-stream&#39;;

import config from &#39;./webpack.config.babel.js&#39;;

const Header = &amp;quot;@set @junk=1 /*\r\n@cscript //nologo //e:jscript \&amp;quot;%~f0\&amp;quot; %*\r\n@exit /b %errorlevel%\r\n\r\n*/&amp;quot;;

gulp.task(&#39;build&#39;, () =&amp;gt; {
  gulp.src(&#39;src&#39;)
    .pipe(plumber())
    .pipe(webpack(config))
    .pipe(eol(&amp;quot;\r\n&amp;quot;))
    .pipe(encoding({to: &amp;quot;Shift_JIS&amp;quot;}))
    .pipe(rename({extname: &amp;quot;.cmd&amp;quot;}))
    .pipe(header(Header))
    .pipe(gulp.dest(&#39;dst&#39;));
});

gulp.task(&#39;watch&#39;, [&#39;build&#39;], () =&amp;gt; {
  watch([&amp;quot;./src/**&amp;quot;], (evt) =&amp;gt; {
    gulp.start(&#39;default&#39;);
  });
});

gulp.task(&#39;default&#39;, [&#39;build&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;webpack実行&lt;/li&gt;
&lt;li&gt;改行コードを &lt;code&gt;CRLF&lt;/code&gt; へ変更&lt;/li&gt;
&lt;li&gt;文字コードを &lt;code&gt;Shift_JIS&lt;/code&gt; へ変換&lt;/li&gt;
&lt;li&gt;拡張子を &lt;code&gt;.cmd&lt;/code&gt; へ変更&lt;/li&gt;
&lt;li&gt;ヘッダーを付与 (バッチファイルとして実行させるため)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ってことをしてる。&lt;/p&gt;

&lt;p&gt;実行するときは、 &lt;code&gt;npm script&lt;/code&gt; で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;watch タスクは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで快適にJScriptがかける！！&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/25384360/how-to-prevent-moment-js-from-loading-locales-with-webpack&#34;&gt;javascript - How to prevent moment.js from loading locales with webpack? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/BryceHQ/es3ify-webpack-plugin&#34;&gt;BryceHQ/es3ify-webpack-plugin: A simple webpack plugin to es3ify your code for old versions of ie, such as ie8.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Super saiya Vim !</title>
      <link>http://yukimemi.github.io/post/2015-09-23_Super%20saiya%20Vim%20%21/</link>
      <pubDate>Wed, 23 Sep 2015 14:54:51 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-09-23_Super%20saiya%20Vim%20%21/</guid>
      <description>

&lt;p&gt;Vimでも超サイヤ人になりたい！&lt;/p&gt;

&lt;p&gt;ってなわけでやってみた。&lt;/p&gt;

&lt;p&gt;経緯としては、Windows環境でvimの起動がかなり遅かったため。&lt;/p&gt;

&lt;p&gt;vimに導入したプラグイン数が多くなりすぎていたため、起動に時間がかかっていた。
そこで、起動時には基本的なプラグインのみ読み込み、後から必要に応じてpluginを追加で読み込むようにしてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;if has(&#39;vim_starting&#39;)
  if &amp;amp;compatible
    set nocompatible
  endif
  set runtimepath+=~/.cache/neobundle/neobundle.vim
endif

call neobundle#begin(expand(&#39;~/.cache/neobundle&#39;))

if neobundle#load_cache()

  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle_base.toml&#39;)
  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy_base.toml&#39;, {&#39;lazy&#39; : 1})

  NeoBundleSaveCache
endif

call neobundle#end()

filetype plugin indent on

nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;s :&amp;lt;C-u&amp;gt;call &amp;lt;SID&amp;gt;loadAllPlugins()&amp;lt;CR&amp;gt;
function! s:loadAllPlugins()
  call neobundle#append()

  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle.toml&#39;)
  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy.toml&#39;, {&#39;lazy&#39; : 1})

  call neobundle#end()
  filetype plugin indent on
  source ~/.vim/vim.d/05_pluginsetting.vim
  echom &amp;quot;Suuuuuuuuuper !!!!!!!&amp;quot;
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、起動時は最小限のpluginで爆速起動し、必要な時に &lt;code&gt;&amp;lt;Space&amp;gt;s&lt;/code&gt; を押下することで超サイヤVimになれる。(全pluginをロードする)&lt;/p&gt;

&lt;p&gt;遅かったWindows環境ではまだ試せていないが、New MacBook 12では、0.2sくらいの起動時間が0.15sにまで短縮された・・・！&lt;/p&gt;

&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.hifumi.info/2015/03/29/neobundle-load-toml/&#34;&gt;NeoBundleのプラグイン管理をTOMLに任せてvimrcをスッキリさせる | blog: takahiro okumura&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Shougo/3d2adcb83e9eb0e8d4af&#34;&gt;neobundle の toml 記法サンプル&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up Macbook in Ansible</title>
      <link>http://yukimemi.github.io/post/2015-07-26_Set%20up%20Macbook%20in%20Ansible/</link>
      <pubDate>Sun, 26 Jul 2015 16:08:23 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-07-26_Set%20up%20Macbook%20in%20Ansible/</guid>
      <description>

&lt;p&gt;せっかくMacbookを新調したので、セットアップを今までのオレオレスクリプトから、ansibleに移行した。&lt;/p&gt;

&lt;p&gt;先人の参考になりまくる記事がいっぱいあるので、けっこう簡単に出来た。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yukimemi/ansible-playbook&#34;&gt;yukimemi/ansible-playbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考記事だと、ansible-galaxyで、事前にhomebrewパッケージをインストールしなきゃいけない
みたいに書いてあるけど、実際は不要だった。&lt;/p&gt;

&lt;p&gt;べんりだansible。
Mac以外にも対応出来るように今後は拡張していきたい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/oAjTzf&#34;&gt;AnsibleでHomebrew, Cask, Atomエディターのパッケージを管理する - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/SrOGry&#34;&gt;MacだってAnsibleで構成管理したい！ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/xczLlf&#34;&gt;Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New MacBook 12</title>
      <link>http://yukimemi.github.io/post/2015-07-26_New%20MacBook%2012/</link>
      <pubDate>Sun, 26 Jul 2015 15:17:39 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-07-26_New%20MacBook%2012/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/NewMacbook12.png&#34; alt=&#34;NewMacBook12&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ついに・・・ついに買ってしまった。New MacBook 12インチ。&lt;/p&gt;

&lt;p&gt;今まで使ってたMacbook Air Late 2010のキーボードが急に反応しなくなってしまったため、
急遽New Macbook 12インチを新調した。&lt;/p&gt;

&lt;p&gt;なんにもカスタマイズせずに一番安いのをヤマダ電機で購入した。&lt;/p&gt;

&lt;p&gt;ヤマダのポイントが10パーついて、14000もポイントがある。
何に使おうか・・・。&lt;/p&gt;

&lt;p&gt;肝心のMacbookの使い勝手は、もう文句なしに素晴らしい。
心配してた熱も特になし。&lt;/p&gt;

&lt;p&gt;驚いたのが、こんなに薄いのに、思った以上に良い音が出るということ。&lt;/p&gt;

&lt;p&gt;性能も十分だしすばらしい。ほんとAppleはすごい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PalmDetect in Ubuntu</title>
      <link>http://yukimemi.github.io/post/2015-05-10_PalmDetect%20in%20Ubuntu/</link>
      <pubDate>Sun, 10 May 2015 08:57:44 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-10_PalmDetect%20in%20Ubuntu/</guid>
      <description>

&lt;p&gt;MacBook AirにUbuntu 15.04をインストールした。
だいたい使いやすくはなっているのだけど、たまにキーボード入力をしている時にタッチパッドが誤反応してしまう時があった。&lt;/p&gt;

&lt;p&gt;そこで、手のひら検出？とかいうのを入れてみることにした。&lt;/p&gt;

&lt;p&gt;以下のファイルを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim ~/.config/autostart/synclient.desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容は以下の通り&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[Desktop Entry]
Type=Application
Exec=synclient PalmDetect=1
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[ja]=synclient(PalmDetect)
Name=synclient(PalmDetect)
Comment[ja]=
Comment=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Superキーを押して出てくる検索メニューから「自動起動するアプリケーション」を選択して、そこで記載するのと同じ。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kaz8/items/51a43a7290c29919bc2e&#34;&gt;安全にsynclientでUbuntuのタッチパッド設定を変更する - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use gomi instead of rm</title>
      <link>http://yukimemi.github.io/post/2015-05-04_Use%20gomi/</link>
      <pubDate>Mon, 04 May 2015 17:14:11 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-04_Use%20gomi/</guid>
      <description>&lt;p&gt;rmを安全に行うツールとして、Macでは「rmtrash」、Linuxでは「trash-cli」を使ってきたけど、最近Golangで「gomi」というツールが作成されたとのことなので使用してみた。
とても便利。&lt;/p&gt;

&lt;p&gt;インストールはgo get。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get -u github.com/b4b4r07/gomi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さっそくaliasした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ alias rm=&#39;gomi&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Mayu for IME off in vim</title>
      <link>http://yukimemi.github.io/post/2015-05-02_Mayu%20for%20IME%20off%20in%20vim/</link>
      <pubDate>Sat, 02 May 2015 22:59:12 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-02_Mayu%20for%20IME%20off%20in%20vim/</guid>
      <description>

&lt;p&gt;vimを使っていて困るのがIMEの制御。特に、ノーマルモードに戻った時に自動でIMEがOFFになってくれないと、画面に「jっっっｘ」とかがあふれる。
Macでは、「karabiner」というソフトを使って、「Escape」もしくは、「Ctrl + [」を押下した時に自動でIMEをOFFにすることが出来ていた。&lt;/p&gt;

&lt;p&gt;Linuxでも同じことが出来ないかといろいろググってはみたものの、意外とこれ！ってのが見つからない。
そんな中、一応要望を満たせるのが、「Mayu」というソフトだった。&lt;/p&gt;

&lt;p&gt;Windowsで「窓使いの憂鬱」と呼ばれてたソフトで、Linuxにも対応してるっぽい。&lt;/p&gt;

&lt;p&gt;設定自体は単純なんだけど、キーボードのキーコードを全部定義しなきゃいけないみたいで、それがめんどくさそうだった。
幸いにも、全部をスキャンしたファイルをアップしてくれている人がいたので、使用させてもらった。
一部、MacBookAirのキーコードに対応していなかったものがあったため、少し改変している。&lt;/p&gt;

&lt;h3 id=&#34;mayuのインストール&#34;&gt;Mayuのインストール&lt;/h3&gt;

&lt;p&gt;Mayuはソースコードのみ配布されているので、自分でビルドする必要がある。
Ubuntu 15.04では以下の通りにやるとビルド出来た。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghq get https://github.com/kenhys/mayu.git
$ cd ~/.ghq/src/github.com/kenhys/mayu
$ sudo aptitude install build-essential libboost-iostreams-dev libudev-dev libusb-1.0-0-dev
$ ./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu/
$ make
$ sudo make install
$ sudo chmod +s /usr/local/bin/mayu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mayuはroot権限で実行する必要があり、systemd経由で自動起動させるためにsetuidをたてている。
本当はvisudoとかでmayuのみパスワードなしsudo出来るようにしたりとかのがいいのかもしれないけど、めんどくさいので・・・。&lt;/p&gt;

&lt;h3 id=&#34;fcitx設定&#34;&gt;fcitx設定&lt;/h3&gt;

&lt;p&gt;今回やりたいのは、「Escape」を押下した時にIMEをオフにする、もしくは「Crtl-[」を押下した時にIMEをオフにするということ。
前提として、Ubuntu 15.04では、IMEとしてfcitx-mozcを使用している。&lt;/p&gt;

&lt;p&gt;それから、fcitxの設定で、「入力メソッドをオンに」を「Hangul」(かなキー)、入力メソッドをオフ」に「Hangulhanja」(英数キー)を割り当てる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/fcitx-setting_min.png&#34; alt=&#34;fcitx-setting&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mayu設定&#34;&gt;Mayu設定&lt;/h3&gt;

&lt;p&gt;次に、mayuの設定を書く。上記のようにfcitxの設定をしているのであれば、mayuの設定としては以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;def key Esc Escape = 0x01
def key Eisu = 0x7b

key Esc = Esc Eisu
key C-OpenBracket = C-OpenBracket Eisu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「Escape」が押された時に、「Escape」、「英数」を押し、「Ctrl-[」が押された時に、「Ctrl-[」、「英数」を押すという設定。&lt;/p&gt;

&lt;p&gt;ただ、mayuでは、一通りキーボード上のキーは全てdefしなきゃいけないみたいで、ネット上に公開してくださっているありがたい方の &lt;a href=&#34;http://d.hatena.ne.jp/OKIIZO/20080106/1199639459&#34;&gt;キーコード一覧&lt;/a&gt; を使用させてもらった。&lt;/p&gt;

&lt;p&gt;一部、MacBookAirのキーコードと違う部分があったので、改変している。 &lt;a href=&#34;https://raw.githubusercontent.com/yukimemi/dotfiles/master/.mayu&#34;&gt;mayu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この設定ファイルをHOMEに「.mayu」として置く。
その後、mayuをルート権限で実行する。&lt;/p&gt;

&lt;p&gt;これでvim上でもシェル上でも、どこでも同じようにIMEがオフになるようになる。&lt;/p&gt;

&lt;p&gt;あと、キーボードでキーコード一覧に記載されていないものがあった場合、mayuの標準出力にキーコードが表示される。それをメモして、設定ファイルに適当な名前で「def key hoge = 0xXX」とかしてやれば大丈夫。&lt;/p&gt;

&lt;h3 id=&#34;mayu自動起動&#34;&gt;Mayu自動起動&lt;/h3&gt;

&lt;p&gt;システム起動時に自動でmayuが起動するように、systemdに登録する。&lt;/p&gt;

&lt;p&gt;userごとの自動起動設定としたいため、以下のファイルをまず作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir -p ~/.config/systemd/user
$ vim ~/.config/systemd/user/mayu.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「mayu.service」の中身はこんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[Unit]
Description=mayu keyboard hack

[Service]
ExecStart=/usr/local/bin/mayu

[Install]
WantedBy=default.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、以下のようにして登録する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ systemctl --user daemon-reload
$ systemctl --user list-unit-files
UNIT FILE            STATE
mayu.service         disabled
systemd-exit.service static
basic.target         static
bluetooth.target     static
default.target       static
exit.target          disabled
paths.target         static
printer.target       static
shutdown.target      static
smartcard.target     static
sockets.target       static
sound.target         static
timers.target        static

13 unit files listed.

$ systemctl --user enable mayu.service
$ systemctl --user list-unit-files
UNIT FILE            STATE
mayu.service         enabled
systemd-exit.service static
basic.target         static
bluetooth.target     static
default.target       static
exit.target          disabled
paths.target         static
printer.target       static
shutdown.target      static
smartcard.target     static
sockets.target       static
sound.target         static
timers.target        static

13 unit files listed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;systemdとして正しく起動しているか確かめる場合は、ログを見る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ journalctl
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Starting Basic System.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Started mayu keyboard hack.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Starting mayu keyboard hack...
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Reached target Default.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Startup finished in 44ms.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1]: Started User Manager for UID 1000.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Starting Default.
5月 02 08:57:56 yukimemi-MacBookAir kernel: input: mayu uinpt as /devices/virtual/input/input14
5月 02 08:57:56 yukimemi-MacBookAir mayu[1386]: loading: /home/yukimemi/.mayu
5月 02 08:57:58 yukimemi-MacBookAir mayu[1386]: successfully loaded.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。
だいぶ使いやすくなった。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/sharow/items/e8f7d3e0628d7ee925db&#34;&gt;systemdでの定期実行(timerユニット) - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/OKIIZO/20080106/1199639459&#34;&gt;新型Apple Keyboard微妙 - どんごどんご&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kenhys/mayu&#34;&gt;kenhys/mayu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfoware.blog68.fc2.com/blog-entry-1397.html&#34;&gt;Ubuntu 14.04にMozcと窓使いの憂鬱をインストールする - Symfoware&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guake terminal in ubuntu</title>
      <link>http://yukimemi.github.io/post/2015-05-02_guake%20terminal/</link>
      <pubDate>Sat, 02 May 2015 22:03:13 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-02_guake%20terminal/</guid>
      <description>

&lt;p&gt;macでiTerm2を使っていたので、同じように使えるterminalがないか探していたところ、あんまこれ！ってのが見つからなかったので、昔使ってたguakeを入れた。けっこう普通につかえて便利。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt-get install guake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルトでは、「F12」で起動する。&lt;/p&gt;

&lt;p&gt;おすすめ設定は、こんな感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全般&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/guake-general_min.png&#34; alt=&#34;guake-general&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スクロール&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/guake-scroll_min.png&#34; alt=&#34;guake-scroll&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;外観&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/guake-style_min.png&#34; alt=&#34;guake-style&#34; /&gt;&lt;/p&gt;

&lt;p&gt;タブバーを表示しないようにして、start fullscreenにして、スクロールバーを非表示にして、透明度を下から2個目くらいにしたらちょうどいい感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/guake-terminal_min.png&#34; alt=&#34;guake&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あとは、fontをRicty for Powerlineにする。&lt;/p&gt;

&lt;p&gt;Ricty for Powerlineのインストールは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash
mkdir -p ~/tmp
mkdir -p ~/.fonts
pushd ~/tmp

sudo apt-get install fontforge

wget http://levien.com/type/myfonts/Inconsolata.otf
wget http://iij.dl.sourceforge.jp/mix-mplus-ipa/59022/migu-1m-20130617.zip

unzip migu-1m-20130617.zip

git clone https://github.com/yascentur/Ricty.git

pushd Ricty

./ricty_generator.sh ~/tmp/Inconsolata.otf ~/tmp/migu-1m-20130617/migu-1m-regular.ttf ~/tmp/migu-1m-20130617/migu-1m-bold.ttf

mv Ricty*.ttf ~/.fonts

popd

git clone https://github.com/Lokaltog/vim-powerline.git
fontforge -lang=py -script ./vim-powerline/fontpatcher/fontpatcher $HOME/.fonts/Ricty-Regular.ttf
fontforge -lang=py -script ./vim-powerline/fontpatcher/fontpatcher $HOME/.fonts/Ricty-Bold.ttf
mv Ricty-Regular-Powerline.ttf ~/.fonts
mv Ricty-Bold-Powerline.ttf ~/.fonts

popd

fc-cache -vf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでかなり良くなる。
あとは、色を設定する。iTerm2でもテーマがあったように、guakeでも、ネットにテーマを作ってくださっているありがたい方がいらっしゃるので、使用させてもらう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghq get https://github.com/coolwanglu/guake-colors-solarized.git
$ ghq get https://github.com/erroneousboat/guake-colors-monokai.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有名なsolarizedとmonokaiのテーマ。
適用は、どちらもシェルスクリプトを実行するだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd guake-colors-solarized
$ ./set_dark.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしくは、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd guake-colors-monokai
$ ./setup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一瞬で変わる。べんり。&lt;/p&gt;

&lt;p&gt;あとは、なぜかtmuxが256-color表示出来ていなかった。これは、オプションを指定して起動すればいいみたい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tmux -2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、guake上で実行したvimの背景が透過されていなかった。
こちらは、.vimrcに以下を追加して解決。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;highlight Normal ctermbg=none
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://uonl.tumblr.com/post/53433544404&#34;&gt;Ubuntu on Let&amp;rsquo;s Note vimの背景を半透明にする&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux&#34;&gt;Getting 256 colors to work in tmux - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Ubuntu 15.04 to MacBook Air (11-inch, Late 2010)</title>
      <link>http://yukimemi.github.io/post/2015-05-02_install%20ubuntu%20to%20macbook%20air/</link>
      <pubDate>Sat, 02 May 2015 09:23:30 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-02_install%20ubuntu%20to%20macbook%20air/</guid>
      <description>

&lt;p&gt;使ってるMacBook Airが最近遅くて耐えられなくなってきたので、Ubuntuに乗り換えてみた。&lt;/p&gt;

&lt;p&gt;nvidiaのドライバ関係でいろいろ大変だったのでメモ。&lt;/p&gt;

&lt;h3 id=&#34;install-usbメモリの作成&#34;&gt;Install Usbメモリの作成&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo dd if=./ubuntu-15.04-desktop-amd64.iso of=/dev/sdb bs=4M
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu-インストール&#34;&gt;Ubuntu インストール&lt;/h3&gt;

&lt;p&gt;nvidiaのグラフィックドライバをインストールする場合、grubがefiモードじゃなくてbiosモードでインストールされる必要があるっぽい。
そこで、通常とはちょっと違う方法でインストールする。&lt;/p&gt;

&lt;p&gt;まず、最初の選択で、 &amp;ldquo;Try Ubuntu without installing it&amp;rdquo; を選ぶ。
その後、 &amp;ldquo;Ctrl + Alt + T&amp;rdquo; を押して端末を起動し、インストーラを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo ubiquity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、 &amp;ldquo;それ以外&amp;rdquo; ってのを選んで、自分でパーティションを作成する。
必要なパーティションは以下の3つ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;予約されたBIOSブート領域: 1M&lt;/li&gt;
&lt;li&gt;ext4(/): swap以外全部&lt;/li&gt;
&lt;li&gt;swap: 2048M&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その後はそのままインストールを続ける。
全部終わると再起動が促されるが、そのまま再起動せずに、端末を起動し、grubをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo mount /dev/sda2 /mnt # rootパーティション
$ sudo grub-install --root-directory=/mnt /dev/sda
$ sudo grub-install --root-directory=/mnt --recheck /dev/sda

$ sudo mount --bind /dev /mnt/dev
$ sudo mount --bind /dev/pts /mnt/dev/pts
$ sudo mount --bind /proc /mnt/proc
$ sudo mount --bind /sys /mnt/sys
$ sudo chroot /mnt
$ update-grub
$ exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usbをさしたままだと、sdbにはインストールできないとかなんとかのエラーが出るけど、むし。
コマンドが全部終わったら再起動してusbを抜く。&lt;/p&gt;

&lt;p&gt;普通にubuntuが起動するのでログインし、システム設定より、ソフトウェアとアップデートを開き、追加のドライバータブより、NVIDIAのドライバーにチェックを入れて適用する。
ここのバージョンは変わるっぽいけど、現時点では、「NVIDIA binary driver -version 340.76をnvidia-340から使用します(プロプライエタリ、検証済み)」ってやつだった。&lt;/p&gt;

&lt;p&gt;あと、Wi-Fiのドライバは、使用しない方が安定してた。使用すると、スリープ復帰後にWi-Fiが切断される。&lt;/p&gt;

&lt;p&gt;プロプライエタリのドライバをインストール後は、以下のコマンドを実行して、xorg.confファイルを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nvidia-xconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バックライトの調整ができるように、xorg.confファイルに1行追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Section &amp;quot;Device&amp;quot;
    Identifier     &amp;quot;Device0&amp;quot;
    Driver         &amp;quot;nvidia&amp;quot;
    VendorName     &amp;quot;NVIDIA Corporation&amp;quot;
    BoardName      &amp;quot;GeForce 320M&amp;quot;
    Option         &amp;quot;RegistryDwords&amp;quot; &amp;quot;EnableBrightnessControl=1&amp;quot; # この行
EndSection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終わったら再起動して完了。&lt;/p&gt;

&lt;p&gt;あとは細かい設定をしていくだけ。
インストールして使えるようになるのはここまで。
デフォルト状態でもかなり使える。ubuntuすごい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://variedtastefinder.jpn.ph/diary/395/&#34;&gt;MacBook Air Late 2010 on Ubuntu 14.04 (※05/30追記)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ubuntuforums.org/showthread.php?t=2209602&#34;&gt;[SOLVED] Installing Ubuntu from USB on a MacBook Air 3,1-3,2 (nvidia card)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>