<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/git/index.xml</link>
    <description>Recent content in Git on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="http://yukimemi.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git status recurse</title>
      <link>http://yukimemi.github.io/post/2017-03-19_Git%20status%20recurse/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:07 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-03-19_Git%20status%20recurse/</guid>
      <description>

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; を再帰的に全Gitディレクトリで実行して、変更のあるリポジトリを簡単に見つけたい。&lt;/p&gt;

&lt;p&gt;と思ったので作りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yukimemi/gsr&#34;&gt;yukimemi/gsr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; でインストールできます。&lt;/p&gt;

&lt;p&gt;(バイナリファイルもそのうち用意する)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/yukimemi/gsr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方は簡単で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsr [再帰的にチェックしたいディレクトリ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、 &lt;code&gt;git status&lt;/code&gt; で変更のあるディレクトリだけ出力されます。
デフォルトでは、ディレクトリ名だけが出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsr --status [再帰的にチェックしたいディレクトリ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、オプションをつけると、 &lt;code&gt;git status --short&lt;/code&gt; の出力結果も出力されます。&lt;/p&gt;

&lt;p&gt;ちなみに、 [再帰的にチェックしたいディレクトリ] を指定しなかった場合、
&lt;code&gt;ghq root&lt;/code&gt; を対象にチェックします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/motemen/ghq&#34;&gt;motemen/ghq&lt;/a&gt; を使っている人には便利です。&lt;/p&gt;

&lt;p&gt;デフォルトの出力がディレクトリ名なのは、pecoとか使って移動したいからです。&lt;/p&gt;

&lt;p&gt;例えば、 &lt;code&gt;.zshrc&lt;/code&gt; に、こんな設定を書いてやると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;function __filter() {
  peco | while read line
  do
    echo &amp;quot;Exec: [$@ $line]&amp;quot;
    $@ $line
  done
}
alias gsrl=&#39;gsr | __filter cd&#39;
alias ghl=&#39;gsr --all | __filter cd&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gsrl&lt;/code&gt; で、 &lt;code&gt;ghq&lt;/code&gt; で管理された変更のあるgitディレクトリに移動出来るようになり、 &lt;code&gt;ghl&lt;/code&gt; で &lt;code&gt;ghq&lt;/code&gt; で管理されたすべてのディレクトリに移動出来るようになります。&lt;/p&gt;

&lt;p&gt;非常にべんり。&lt;/p&gt;

&lt;p&gt;さらに、 リモートと差分のあるリポジトリも対象としたい場合、以下のオプションが使用できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gsr --ahead --behind
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;オプション&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;出力対象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;ndash;ahead&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;リモートより新しいものも対象にする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;ndash;behind&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;リモートより古いものも対象にする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;僕は常にこのオプションを有効化して使うので、環境変数に指定しています。
&lt;code&gt;.zshenv&lt;/code&gt; とかに書いておくと、実行時にオプションをいちいち指定しなくても有効化されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;export GSR_SHOW_AHEAD=1
export GSR_SHOW_BEHIND=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、使ってるライブラリ &lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;urfave/cli&lt;/a&gt; の機能みたいです。すごい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;urfave/cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://int128.hatenablog.com/entry/2015/07/15/003851&#34;&gt;git statusを利用したリポジトリ情報のプロンプト表示&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git directory deploy !</title>
      <link>http://yukimemi.github.io/post/2014-07-02_Git%20directory%20deploy%20%21/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-07-02_Git%20directory%20deploy%20%21/</guid>
      <description>

&lt;p&gt;roots のデプロイ手順。&lt;/p&gt;

&lt;p&gt;僕の環境では、まず drafts ブランチで書いて、 master ブランチでpushして
githubへ更新という流れ。
その際、 roots では、ビルド結果を public というディレクトリに出力するので
そのディレクトリだけをpushしたい。
gitで管理している中の、ある一部のディレクトリのみをpushしたい場合は、 &lt;code&gt;git subtree push&lt;/code&gt; という
のが使えるらしいんだけど、参考にしたサイトでは違うアプローチをとっているみたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/X1011/git-directory-deploy&#34;&gt;X1011/git-directory-deploy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;rootsに限らず、静的サイトジェネレーターを使う場合はけっこう使えると思う。&lt;/p&gt;

&lt;h3 id=&#34;これ-https-github-com-x1011-git-directory-deploy-をダウンロード&#34;&gt;&lt;a href=&#34;https://github.com/X1011/git-directory-deploy&#34;&gt;これ&lt;/a&gt; をダウンロード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget https://github.com/X1011/git-directory-deploy/raw/master/deploy.sh &amp;amp;&amp;amp; chmod +x deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;git-directory-deployの設定&#34;&gt;git-directory-deployの設定&lt;/h3&gt;

&lt;p&gt;以下の部分を必要に応じて書き換え。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;deploy_directory=public
deploy_branch=master

#if no user identity is already set in the current git environment, use this:
default_username=yukimemi
default_email=yukimemi@gmail.com

#repository to deploy to. must be readable and writable.
repo=origin
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;初回一度だけ実行&#34;&gt;初回一度だけ実行&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git --work-tree public checkout --orphan master
$ git --work-tree public rm -rf &amp;quot;*&amp;quot;
$ git --work-tree public add --all
$ git --work-tree public commit -m &amp;quot;initial publish&amp;quot;
$ git push -f origin public
$ git symbolic-ref HEAD refs/heads/drafts &amp;amp;&amp;amp; git reset --mixed
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デプロイの仕方&#34;&gt;デプロイの仕方&lt;/h3&gt;

&lt;p&gt;まずは、 drafts ブランチですべてコミットしておく。(未コミットが残っているとエラーになる。)
それから、 roots でコンパイル。
あとは、ダウンロードした deploy.sh を実行するだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ roots compile --no-compress
$ ./deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;べんり。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/X1011/git-directory-deploy&#34;&gt;X1011/git-directory-deploy&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>haskellでgitstatus</title>
      <link>http://yukimemi.github.io/post/2014-05-15-haskell_gitstatus/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-05-15-haskell_gitstatus/</guid>
      <description>

&lt;p&gt;前に Go言語で &lt;a href=&#34;http://yukimemi.bitbucket.org/blog/html/2014/03/22/gitstatus.html#more&#34;&gt;「すべてのディレクトリで git statusする」&lt;/a&gt;
という記事を書いた。&lt;/p&gt;

&lt;p&gt;今度は、 haskell で同じようなのを書いてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import System.IO
import System.Process
import System.Directory
import Control.Exception
import System.FilePath

getAllFiles :: FilePath -&amp;gt; IO [String]
getAllFiles dir = do
  contents &amp;lt;- getDirectoryContents dir `catch` (\(SomeException e) -&amp;gt; const (return []) e)
  let contents&#39; = [dir &amp;lt;/&amp;gt; path | path &amp;lt;- contents, notElem path [&amp;quot;.&amp;quot;, &amp;quot;..&amp;quot;]]
  contents&#39;&#39; &amp;lt;- mapM getAllFiles contents&#39;
  return $ contents&#39; ++ concat contents&#39;&#39;

takeLast list n = reverse . take n $ reverse list

join :: String -&amp;gt; [String] -&amp;gt; String
join sep [] = []
join sep [x] = x
join sep (x:xs) = x ++ sep ++ join sep xs

onlyGitDir :: FilePath -&amp;gt; Bool
onlyGitDir fileName =
  if last == &amp;quot;.git&amp;quot;
    then True
    else False
      where last = takeLast fileName 4

gitStatus :: FilePath -&amp;gt; IO String
gitStatus path = do
  setCurrentDirectory path
  readProcess &amp;quot;git&amp;quot; [&amp;quot;status&amp;quot;] &amp;quot;&amp;quot;

printGitStatus :: FilePath -&amp;gt; IO ()
printGitStatus path = do
  putStrLn &amp;quot;--------------------------------------------------------------------------------&amp;quot;
  putStrLn $ &amp;quot;* &amp;quot; ++ path
  putStrLn &amp;quot;--------------------------------------------------------------------------------&amp;quot;
  gitStatus path &amp;gt;&amp;gt;= putStrLn
  return ()

main = do
  path &amp;lt;- getCurrentDirectory
  files &amp;lt;- getAllFiles path
  let dirs = map takeDirectory $ filter onlyGitDir files
  mapM printGitStatus dirs
  return ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;haskell は勉強始めたばっかだからいろいろ改善の余地があると思われる。
詳しい人教えてくだしあ&lt;/p&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://yunomu.hatenablog.jp/entry/2012/03/10/111222&#34;&gt;HaskellでOSコマンド実行 - yunomuのブログ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sitekamimura.blogspot.jp/2014/01/haskell-systemfilepathpathseparator.html&#34;&gt;Haskell - 移植性の問題(ファイル名問題(パス区切りの違い), System.FilePathモジュール(pathSeparator, joinPath関数)) | Kamimura&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tsurushuu.wikidot.com/haskell&#34;&gt;Haskell - すてきにへんな覚え書き&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golang git 管理のすべてのディレクトリで 「git status」する</title>
      <link>http://yukimemi.github.io/post/2014-03-22-gitstatus/</link>
      <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-03-22-gitstatus/</guid>
      <description>

&lt;p&gt;Go言語が流行りっぽいので、Goを使って、カレントディレクトリ配下の、gitで管理されているすべてのディレクトリで「git
status」を実行するプログラムを書いてみた。
別にGoで書く必要はないんだけど・・・。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yukimemi/gitstatus&#34;&gt;yukimemi/gitstatus&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gitstatus yukimemi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいにすると、「gitstatus」を実行したディレクトリ配下で、「git remote
-v」に「yukimemi」が含まれるものを対象に、「git
status」を実行して出力する。引数を指定しなければ、すべてのディレクトリで。&lt;/p&gt;

&lt;p&gt;出力イメージはこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root /Users/yukimemi
--------------------------------------------------------------------------------
★  /Users/yukimemi/.oh-my-zsh
On branch master
Your branch is up-to-date with &#39;origin/master&#39;.

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

        modified:   templates/zshrc.zsh-template

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
★  /Users/yukimemi/Documents/git/go
On branch master
Your branch is up-to-date with &#39;origin/master&#39;.

Changes not staged for commit:
  (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

        deleted:    gitstatus/gitstatus.go

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
★  /Users/yukimemi/Documents/git/yukimemi.bitbucket.org
On branch drafts
Your branch is ahead of &#39;origin/drafts&#39; by 1 commit.
  (use &amp;quot;git push&amp;quot; to publish your local commits)

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

        modified:   2014/03/22/gitstatus.rst
        modified:   blog/doctrees/2014/03/22/gitstatus.doctree
        modified:   blog/doctrees/environment.pickle

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)

--------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、Goはクロスコンパイルが簡単ということで、「drone.io」にてクロスコンパイルするようにしてみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://drone.io/github.com/yukimemi/gitstatus/files&#34;&gt;Downloads | gitstatus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;非常に便利。&lt;/p&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/atotto/items/b796c31c1755dbec13db&#34;&gt;Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/path/filepath/#Walk&#34;&gt;filepath - The Go Programming Language&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>