<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/git/</link>
    <description>Recent content in Git on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 19 Mar 2017 00:00:07 +0900</lastBuildDate>
    
	<atom:link href="http://yukimemi.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git status recurse</title>
      <link>http://yukimemi.github.io/post/2017-03-19_git-status-recurse/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:07 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-03-19_git-status-recurse/</guid>
      <description>git status を再帰的に全Gitディレクトリで実行して、変更のあるリポジトリを簡単に見つけたい。
と思ったので作りました。
yukimemi/gsr
go get でインストールできます。
(バイナリファイルもそのうち用意する)
$ go get github.com/yukimemi/gsr  使い方は簡単で
$ gsr [再帰的にチェックしたいディレクトリ]  とすると、 git status で変更のあるディレクトリだけ出力されます。 デフォルトでは、ディレクトリ名だけが出力されます。
$ gsr --status [再帰的にチェックしたいディレクトリ]  と、オプションをつけると、 git status --short の出力結果も出力されます。
ちなみに、 [再帰的にチェックしたいディレクトリ] を指定しなかった場合、 ghq root を対象にチェックします。
motemen/ghq を使っている人には便利です。
デフォルトの出力がディレクトリ名なのは、pecoとか使って移動したいからです。
例えば、 .zshrc に、こんな設定を書いてやると、
function __filter() { peco | while read line do echo &amp;quot;Exec: [$@ $line]&amp;quot; $@ $line done } alias gsrl=&#39;gsr | __filter cd&#39; alias ghl=&#39;gsr --all | __filter cd&#39;  gsrl で、 ghq で管理された変更のあるgitディレクトリに移動出来るようになり、 ghl で ghq で管理されたすべてのディレクトリに移動出来るようになります。</description>
    </item>
    
    <item>
      <title>Git directory deploy !</title>
      <link>http://yukimemi.github.io/post/2014-07-02_git-directory-deploy-/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-07-02_git-directory-deploy-/</guid>
      <description>roots のデプロイ手順。
僕の環境では、まず drafts ブランチで書いて、 master ブランチでpushして githubへ更新という流れ。 その際、 roots では、ビルド結果を public というディレクトリに出力するので そのディレクトリだけをpushしたい。 gitで管理している中の、ある一部のディレクトリのみをpushしたい場合は、 git subtree push という のが使えるらしいんだけど、参考にしたサイトでは違うアプローチをとっているみたい。
X1011/git-directory-deploy
rootsに限らず、静的サイトジェネレーターを使う場合はけっこう使えると思う。
これ をダウンロード $ wget https://github.com/X1011/git-directory-deploy/raw/master/deploy.sh &amp;amp;&amp;amp; chmod +x deploy.sh  git-directory-deployの設定 以下の部分を必要に応じて書き換え。
deploy_directory=public deploy_branch=master #if no user identity is already set in the current git environment, use this: default_username=yukimemi default_email=yukimemi@gmail.com #repository to deploy to. must be readable and writable. repo=origin  初回一度だけ実行 $ git --work-tree public checkout --orphan master $ git --work-tree public rm -rf &amp;quot;*&amp;quot; $ git --work-tree public add --all $ git --work-tree public commit -m &amp;quot;initial publish&amp;quot; $ git push -f origin public $ git symbolic-ref HEAD refs/heads/drafts &amp;amp;&amp;amp; git reset --mixed  デプロイの仕方 まずは、 drafts ブランチですべてコミットしておく。(未コミットが残っているとエラーになる。) それから、 roots でコンパイル。 あとは、ダウンロードした deploy.</description>
    </item>
    
    <item>
      <title>haskellでgitstatus</title>
      <link>http://yukimemi.github.io/post/2014-05-15-haskell_gitstatus/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-05-15-haskell_gitstatus/</guid>
      <description>前に Go言語で 「すべてのディレクトリで git statusする」 という記事を書いた。
今度は、 haskell で同じようなのを書いてみた。
import System.IO import System.Process import System.Directory import Control.Exception import System.FilePath getAllFiles :: FilePath -&amp;gt; IO [String] getAllFiles dir = do contents &amp;lt;- getDirectoryContents dir `catch` (\(SomeException e) -&amp;gt; const (return []) e) let contents&#39; = [dir &amp;lt;/&amp;gt; path | path &amp;lt;- contents, notElem path [&amp;quot;.&amp;quot;, &amp;quot;..&amp;quot;]] contents&#39;&#39; &amp;lt;- mapM getAllFiles contents&#39; return $ contents&#39; ++ concat contents&#39;&#39; takeLast list n = reverse .</description>
    </item>
    
    <item>
      <title>golang git 管理のすべてのディレクトリで 「git status」する</title>
      <link>http://yukimemi.github.io/post/2014-03-22-gitstatus/</link>
      <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-03-22-gitstatus/</guid>
      <description>Go言語が流行りっぽいので、Goを使って、カレントディレクトリ配下の、gitで管理されているすべてのディレクトリで「git status」を実行するプログラムを書いてみた。 別にGoで書く必要はないんだけど・・・。
yukimemi/gitstatus
$ gitstatus yukimemi  みたいにすると、「gitstatus」を実行したディレクトリ配下で、「git remote -v」に「yukimemi」が含まれるものを対象に、「git status」を実行して出力する。引数を指定しなければ、すべてのディレクトリで。
出力イメージはこんな感じ。
root /Users/yukimemi -------------------------------------------------------------------------------- ★ /Users/yukimemi/.oh-my-zsh On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed) (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory) modified: templates/zshrc.zsh-template no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;) -------------------------------------------------------------------------------- -------------------------------------------------------------------------------- ★ /Users/yukimemi/Documents/git/go On branch master Your branch is up-to-date with &#39;origin/master&#39;.</description>
    </item>
    
  </channel>
</rss>