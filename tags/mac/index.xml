<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mac on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/mac/</link>
    <description>Recent content in Mac on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 26 Jul 2015 16:08:23 +0900</lastBuildDate>
    <atom:link href="http://yukimemi.github.io/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Set up Macbook in Ansible</title>
      <link>http://yukimemi.github.io/post/2015-07-26_Set%20up%20Macbook%20in%20Ansible/</link>
      <pubDate>Sun, 26 Jul 2015 16:08:23 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-07-26_Set%20up%20Macbook%20in%20Ansible/</guid>
      <description>

&lt;p&gt;せっかくMacbookを新調したので、セットアップを今までのオレオレスクリプトから、ansibleに移行した。&lt;/p&gt;

&lt;p&gt;先人の参考になりまくる記事がいっぱいあるので、けっこう簡単に出来た。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yukimemi/ansible-playbook&#34;&gt;yukimemi/ansible-playbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考記事だと、ansible-galaxyで、事前にhomebrewパッケージをインストールしなきゃいけない
みたいに書いてあるけど、実際は不要だった。&lt;/p&gt;

&lt;p&gt;べんりだansible。
Mac以外にも対応出来るように今後は拡張していきたい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/oAjTzf&#34;&gt;AnsibleでHomebrew, Cask, Atomエディターのパッケージを管理する - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/SrOGry&#34;&gt;MacだってAnsibleで構成管理したい！ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/xczLlf&#34;&gt;Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New MacBook 12</title>
      <link>http://yukimemi.github.io/post/2015-07-26_New%20MacBook%2012/</link>
      <pubDate>Sun, 26 Jul 2015 15:17:39 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-07-26_New%20MacBook%2012/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/NewMacbook12.png&#34; alt=&#34;NewMacBook12&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ついに・・・ついに買ってしまった。New MacBook 12インチ。&lt;/p&gt;

&lt;p&gt;今まで使ってたMacbook Air Late 2010のキーボードが急に反応しなくなってしまったため、
急遽New Macbook 12インチを新調した。&lt;/p&gt;

&lt;p&gt;なんにもカスタマイズせずに一番安いのをヤマダ電機で購入した。&lt;/p&gt;

&lt;p&gt;ヤマダのポイントが10パーついて、14000もポイントがある。
何に使おうか・・・。&lt;/p&gt;

&lt;p&gt;肝心のMacbookの使い勝手は、もう文句なしに素晴らしい。
心配してた熱も特になし。&lt;/p&gt;

&lt;p&gt;驚いたのが、こんなに薄いのに、思った以上に良い音が出るということ。&lt;/p&gt;

&lt;p&gt;性能も十分だしすばらしい。ほんとAppleはすごい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Ubuntu 15.04 to MacBook Air (11-inch, Late 2010)</title>
      <link>http://yukimemi.github.io/post/2015-05-02_install%20ubuntu%20to%20macbook%20air/</link>
      <pubDate>Sat, 02 May 2015 09:23:30 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-02_install%20ubuntu%20to%20macbook%20air/</guid>
      <description>

&lt;p&gt;使ってるMacBook Airが最近遅くて耐えられなくなってきたので、Ubuntuに乗り換えてみた。&lt;/p&gt;

&lt;p&gt;nvidiaのドライバ関係でいろいろ大変だったのでメモ。&lt;/p&gt;

&lt;h3 id=&#34;install-usbメモリの作成&#34;&gt;Install Usbメモリの作成&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo dd if=./ubuntu-15.04-desktop-amd64.iso of=/dev/sdb bs=4M
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu-インストール&#34;&gt;Ubuntu インストール&lt;/h3&gt;

&lt;p&gt;nvidiaのグラフィックドライバをインストールする場合、grubがefiモードじゃなくてbiosモードでインストールされる必要があるっぽい。
そこで、通常とはちょっと違う方法でインストールする。&lt;/p&gt;

&lt;p&gt;まず、最初の選択で、 &amp;ldquo;Try Ubuntu without installing it&amp;rdquo; を選ぶ。
その後、 &amp;ldquo;Ctrl + Alt + T&amp;rdquo; を押して端末を起動し、インストーラを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo ubiquity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、 &amp;ldquo;それ以外&amp;rdquo; ってのを選んで、自分でパーティションを作成する。
必要なパーティションは以下の3つ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;予約されたBIOSブート領域: 1M&lt;/li&gt;
&lt;li&gt;ext4(/): swap以外全部&lt;/li&gt;
&lt;li&gt;swap: 2048M&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その後はそのままインストールを続ける。
全部終わると再起動が促されるが、そのまま再起動せずに、端末を起動し、grubをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo mount /dev/sda2 /mnt # rootパーティション
$ sudo grub-install --root-directory=/mnt /dev/sda
$ sudo grub-install --root-directory=/mnt --recheck /dev/sda

$ sudo mount --bind /dev /mnt/dev
$ sudo mount --bind /dev/pts /mnt/dev/pts
$ sudo mount --bind /proc /mnt/proc
$ sudo mount --bind /sys /mnt/sys
$ sudo chroot /mnt
$ update-grub
$ exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usbをさしたままだと、sdbにはインストールできないとかなんとかのエラーが出るけど、むし。
コマンドが全部終わったら再起動してusbを抜く。&lt;/p&gt;

&lt;p&gt;普通にubuntuが起動するのでログインし、システム設定より、ソフトウェアとアップデートを開き、追加のドライバータブより、NVIDIAのドライバーにチェックを入れて適用する。
ここのバージョンは変わるっぽいけど、現時点では、「NVIDIA binary driver -version 340.76をnvidia-340から使用します(プロプライエタリ、検証済み)」ってやつだった。&lt;/p&gt;

&lt;p&gt;あと、Wi-Fiのドライバは、使用しない方が安定してた。使用すると、スリープ復帰後にWi-Fiが切断される。&lt;/p&gt;

&lt;p&gt;プロプライエタリのドライバをインストール後は、以下のコマンドを実行して、xorg.confファイルを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo nvidia-xconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バックライトの調整ができるように、xorg.confファイルに1行追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Section &amp;quot;Device&amp;quot;
    Identifier     &amp;quot;Device0&amp;quot;
    Driver         &amp;quot;nvidia&amp;quot;
    VendorName     &amp;quot;NVIDIA Corporation&amp;quot;
    BoardName      &amp;quot;GeForce 320M&amp;quot;
    Option         &amp;quot;RegistryDwords&amp;quot; &amp;quot;EnableBrightnessControl=1&amp;quot; # この行
EndSection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終わったら再起動して完了。&lt;/p&gt;

&lt;p&gt;あとは細かい設定をしていくだけ。
インストールして使えるようになるのはここまで。
デフォルト状態でもかなり使える。ubuntuすごい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://variedtastefinder.jpn.ph/diary/395/&#34;&gt;MacBook Air Late 2010 on Ubuntu 14.04 (※05/30追記)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ubuntuforums.org/showthread.php?t=2209602&#34;&gt;[SOLVED] Installing Ubuntu from USB on a MacBook Air 3,1-3,2 (nvidia card)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mac OS X Mavericks クリーンインストール</title>
      <link>http://yukimemi.github.io/post/2013-10-26-setup_mavericks/</link>
      <pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-10-26-setup_mavericks/</guid>
      <description>

&lt;p&gt;Mavericks がなんと無料で出たので、早速アップデートしました。&lt;/p&gt;

&lt;p&gt;新しいOSにする時は毎回全消去してからまっさらな状態で
新規インストールするので、今回も &lt;a href=&#34;http://wayohoo.com/mac/tips/how-to-clean-install-os-x-mavericks.html&#34;&gt;【Mac】OS X Mavericks (マーベリックス)を クリーンインストールする方法 | 和洋風KAI&lt;/a&gt;
を参考にして新規インストールした。&lt;/p&gt;

&lt;p&gt;インストールした後は、以下のステップで環境を構築。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github と bitbucket にsshキーを登録&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ssh-keygen
  Generating public/private rsa key pair.
  Enter file in which to save the key (/Users/yukimemi/.ssh/id_rsa): [Enter]
  ... 全部 [Enter]
  ..
  .
$ cat ~/.ssh/id_rsa.pub | pbcopy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;github と bitbucket に元々登録してあったsshキーを削除して
から、新たにクリップボードに入ってるキーを登録。&lt;/p&gt;

&lt;p&gt;(このsshキーの登録もコマンドから出来たりせんのかな・・・)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github から、 dotfiles をクローン&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;自分の環境構築用 dotfiles をクローンする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone git@github.com:yukimemi/dotfiles.git
$ cd dotfiles
$ ./setup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで一応ほぼ環境構築は終わり。
後は各アプリケーションの設定を個別にやるくらい。&lt;/p&gt;

&lt;p&gt;setup.sh の中身は以下のような感じ。 中でもとても便利なのが、
homebrew cask 。 これはWindowsの chocolatey
みたいに、アプリケーションを インストールしてくれる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash
git submodule init
git submodule update

# tmux or screen
echo &amp;quot;local? , server?&amp;quot;
echo &amp;quot;l , s&amp;quot;
read lors
while :
do
  if [ &amp;quot;${lors}&amp;quot; = &amp;quot;l&amp;quot; ]; then
    tmux=&amp;quot;.tmux.conf&amp;quot;
    break
  elif [ &amp;quot;${lors}&amp;quot; = &amp;quot;s&amp;quot; ]; then
    tmux=&amp;quot;.tmux.conf_server&amp;quot;
    break
  else
    echo &amp;quot;Press l , s&amp;quot;
    read lors
  fi
done
# tmux
rm ${HOME}/.tmux.conf
ln -s ${PWD}/${tmux} ${HOME}/.tmux.conf

# zsh
cd zsh
ZSH_FILE=( .zshenv )
for file in ${ZSH_FILE[@]}
do
  rm ${HOME}/${file}
  ln -s ${PWD}/${file} ${HOME}/${file}
done
cd ../

[[ ! -d &amp;quot;${HOME}/.oh-my-zsh&amp;quot; ]] &amp;amp;&amp;amp; git clone git@github.com:yukimemi/oh-my-zsh.git ~/.oh-my-zsh
rm ${HOME}/.zshrc
ln -s ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc

# vim
cd vim
VIM_FILE=( .vimrc .gvimrc .vim )
for file in ${VIM_FILE[@]}
do
  rm ${HOME}/${file}
  ln -s ${PWD}/${file} ${HOME}/${file}
done
cd ../

[[ ! -d vim/.vim/back ]] &amp;amp;&amp;amp; mkdir -p vim/.vim/back

# vimperator
cd vimperator
[[ ! -d ${HOME}/.vimperator/plugin ]] mkdir -p ${HOME}/.vimperator/plugin
git clone git://github.com/caisui/vimperator.git ${HOME}/.vimperator/caisui
git clone git://gist.github.com/377348.git ${HOME}/.vimperator/377348
git clone git://github.com/vimpr/vimperator-plugins.git ${HOME}/.vimperator/vimperator-plugins
git clone git://github.com/vimpr/vimperator-rc.git ${HOME}/.vimperator/vimperator-rc

rm ${HOME}/.vimperatorrc
ln -s ${PWD}/.vimperatorrc ${HOME}/

rm ${HOME}/.vimperator/plugin/plugin_loader.js
ln -s ${HOME}/.vimperator/vimperator-plugins/plugin_loader.js ${HOME}/.vimperator/plugin/
rm ${HOME}/.vimperator/colors
ln -s ${HOME}/.vimperator/vimperator-rc/anekos/colors ${HOME}/.vimperator/
cd ../

# dotfiles
DOT_FILES=( .vrapperrc .gemrc)
for file in ${DOT_FILES[@]}
do
  rm ${HOME}/${file}
  ln -s ${PWD}/${file} ${HOME}/${file}
done

# KeyRemap4MacBook
cd mac
[[ ! -d ${HOME}/Library/Application\ Support/KeyRemap4MacBook ]] &amp;amp;&amp;amp; mkdir -p ${HOME}/Library/Application\ Support/KeyRemap4MacBook
rm ${HOME}/Library/Application\ Support/KeyRemap4MacBook/private.xml
ln -s ${PWD}/private.xml ${HOME}/Library/Application\ Support/KeyRemap4MacBook/private.xml
cd ../

# global gitignore
rm ${HOME}/.gitignore
ln -s ${PWD}/global-gitignore ${HOME}/.gitignore
git config --global core.excludesfile ~/.gitignore

# git
git config --global user.name &#39;yukimemi&#39;
git config --global github.user &#39;yukimemi&#39;
git config --global push.default simple
git config --global color.diff auto
# alias
git config --global alias.ci commit
git config --global alias.co checkout
git config --global alias.st status
# editor
git config --global core.editor vim

# install homebrew
ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;quot;
brew install reattach-to-user-namespace
brew install --disable-etcdir zsh
brew install lv
brew install git
brew install git-now
brew install tmux
brew install readline
brew install openssl
brew install coreutils
brew install rmtrash
brew install cmatrix
brew install zsh-completions
brew install mosh
brew install nkf
brew install rbenv ruby-build rbenv-gemset rbenv-binstubs
brew install macvim --with-cscope --with-lua --HEAD
brew install go
ln -s /usr/local/Cellar/macvim/HEAD/MacVim.app /Applications

brew tap phinze/homebrew-cask
brew install brew-cask
brew cask install google-chrome
brew cask install firefox
brew cask install right-zoom
brew cask install app-cleaner
brew cask install keyremap4macbook
brew cask install caffeine
brew cask install bettertouchtool
brew cask install iterm2
brew cask install quicksilver
brew cask install dropbox
brew cask install evernote

# scripts git clone
[ ! -d ${HOME}/bin ] &amp;amp;&amp;amp; mkdir ${HOME}/bin
cd ${HOME}/bin
git clone git@bitbucket.org:yukimemi/scripts.git

# iterm2 solalized colorscheme
git clone https://github.com/altercation/solarized.git ~/.solarized
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/ryurock/items/1432578d364985f6cb06&#34;&gt;OSX - みんなhomebrew-caskって知ってるか？ - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mac OSX Mountain Lion MongoDB セットアップ</title>
      <link>http://yukimemi.github.io/post/2013-06-16-setup_mongodb/</link>
      <pubDate>Sun, 16 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-06-16-setup_mongodb/</guid>
      <description>&lt;p&gt;mongodb をいれてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでインストール完了。簡単。&lt;/p&gt;

&lt;p&gt;自動起動する設定も書いてあるからそれを実行するだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで自動起動される。&lt;/p&gt;

&lt;p&gt;手動で起動するには、次のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ launchctl start homebrew.mxcl.mongodb
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>