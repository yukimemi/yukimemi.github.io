<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zsh on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/zsh/</link>
    <description>Recent content in Zsh on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 27 Nov 2016 00:49:25 +0900</lastBuildDate>
    
	<atom:link href="http://yukimemi.github.io/tags/zsh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use fish instead of zsh</title>
      <link>http://yukimemi.github.io/post/2016-11-27_use-fish-instead-of-zsh/</link>
      <pubDate>Sun, 27 Nov 2016 00:49:25 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-11-27_use-fish-instead-of-zsh/</guid>
      <description>ちまたで(？)話題の fish を使ってみた。
長年使ってきた zsh のかわりにはならないだろうなーと思いながら・・・。
・・・が、いざ使ってみると非常に使いやすい！
zsh のかわりになるどころか置き換えてしまった。
(つまり、自分は結局そこまで zsh を使いこなしていなかったんだろう・・・。)
fish のチュートリアルは、以下にある。
fish tutorial
日本語でもqiitaとかにいっぱい解説記事があるので難しいことはないと思う。 唯一はまったのは、上記tutorialにある、 hybrid_bindings 。
vi っぽいキーバインドで、 insert モードの場合は emacs っぽくするって感じなんだろうけど、使用できなかった。 なんか issue 上がってたりしたので、そのうち修正されるのかもしれない。
とりあえずは、必要なキーバインドのみを自分で再定義してやることで要望は満たせた。
fish では、 fisherman というプラグインマネージャーが存在しており、これを使って各種プラグインを管理する。 日本語での解説も書いてあるので導入は簡単。
$ curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher  上記を実行するだけ。
自分が入れたパッケージはとりあえずこんだけ。
 simple : シンプルなテーマ omf/gi : gitignore を管理できるやつ。  2個だけ。 fish が単体で色々出来るやつだからこそかも。
fish は、設定を ~/.config/fish 配下で管理する。 こんな感じ。
$ tree fish fish ├── completions ├── conf.d ├── config.</description>
    </item>
    
    <item>
      <title>Zsh autosuggestions</title>
      <link>http://yukimemi.github.io/post/2016-09-25_zsh-autosuggestions/</link>
      <pubDate>Sun, 25 Sep 2016 23:53:12 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-25_zsh-autosuggestions/</guid>
      <description>zsh-autosuggestions という便利な zsh のプラギンを見つけた。
zplug を使って簡単にインストール可能。
zplug &amp;quot;zsh-users/zsh-autosuggestions&amp;quot;  あとは、表示された補完を決定するキーの設定を追加。 ちなみにデフォルトだと、右矢印が割り当てられてる模様。
bindkey &#39;^ &#39; autosuggest-accept  で、 Ctrl + Space で、補完候補が確定する。
べんり。</description>
    </item>
    
    <item>
      <title>mosh error No such file or directory</title>
      <link>http://yukimemi.github.io/post/2014-07-06_mosh-error-no-such-file-or-directory/</link>
      <pubDate>Sun, 06 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-07-06_mosh-error-no-such-file-or-directory/</guid>
      <description>mosh というmobile-shelllを導入してみたところ、「No such file or directory」という エラーが発生して使えなかった・・・。
原因は結局よくわからなかったんだけど、とりあえず使えるようになったので、一応メモとして残しとこ。
mosh install 環境は Mac OSX Mavericks。Homebrewで簡単にインストール出来た。
$ brew install mosh  昔は mobile-shelll だったみたいだけど、今は mosh でインストール出来る。 クライアント側とサーバ側両方インストールしておく必要あり。
使い方 普通の ssh を mosh に変えるだけ。
$ ssh yukimemi@yukimemi-my-host.com  ↓
$ mosh yukimemi@yukimemi-my-host.com  だけど、なぜか、こんなエラーが出て使えなかった・・・。
$ mosh yukimemi@yukimemi-my-host.com zsh: No such file or directory ssh_exchange_identification: Connection closed by remote host /usr/local/bin/mosh: Did not find remote IP address (is SSH ProxyCommand disabled?).  なんかzshが見つかんない？みたいなエラー。 zshが悪いのかと思い、bashからやってみてもエラーになった。</description>
    </item>
    
    <item>
      <title>All You Need Is Peco</title>
      <link>http://yukimemi.github.io/post/2014-06-29_all-you-need-is-peco/</link>
      <pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-06-29_all-you-need-is-peco/</guid>
      <description>最近 peco がかなり流行りっぽい。 そこで導入してみた。思ったより使い心地よくて、 zaw から乗り換えた。
導入手順 homebrewでgoをインストール。
$ brew install go --cross-compile-common  .zshenv に以下を記載。
# go export GOPATH=$HOME/.go export PATH=$GOPATH/bin:$PATH [ ! -d $GOPATH ] &amp;amp;&amp;amp; mkdir $GOPATH if which go &amp;gt; /dev/null; then export GOROOT=$(go env GOROOT) # ghq go get github.com/motemen/ghq git config --global ghq.root ~/.ghq # peco go get github.com/peco/peco/cmd/peco # gh-open go get github.com/typester/gh-open fi  .zshenv を読み込み直す
$ source ~/.zshenv  インストール完了。</description>
    </item>
    
  </channel>
</rss>