<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vimrc on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/vimrc/</link>
    <description>Recent content in Vimrc on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 23 Sep 2015 14:54:51 +0900</lastBuildDate>
    
	<atom:link href="http://yukimemi.github.io/tags/vimrc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Super saiya Vim !</title>
      <link>http://yukimemi.github.io/post/2015-09-23_super-saiya-vim-/</link>
      <pubDate>Wed, 23 Sep 2015 14:54:51 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-09-23_super-saiya-vim-/</guid>
      <description>Vimでも超サイヤ人になりたい！
ってなわけでやってみた。
経緯としては、Windows環境でvimの起動がかなり遅かったため。
vimに導入したプラグイン数が多くなりすぎていたため、起動に時間がかかっていた。 そこで、起動時には基本的なプラグインのみ読み込み、後から必要に応じてpluginを追加で読み込むようにしてみた。
if has(&#39;vim_starting&#39;) if &amp;amp;compatible set nocompatible endif set runtimepath+=~/.cache/neobundle/neobundle.vim endif call neobundle#begin(expand(&#39;~/.cache/neobundle&#39;)) if neobundle#load_cache() call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle_base.toml&#39;) call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy_base.toml&#39;, {&#39;lazy&#39; : 1}) NeoBundleSaveCache endif call neobundle#end() filetype plugin indent on nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;s :&amp;lt;C-u&amp;gt;call &amp;lt;SID&amp;gt;loadAllPlugins()&amp;lt;CR&amp;gt; function! s:loadAllPlugins() call neobundle#append() call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle.toml&#39;) call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy.toml&#39;, {&#39;lazy&#39; : 1}) call neobundle#end() filetype plugin indent on source ~/.vim/vim.d/05_pluginsetting.vim echom &amp;quot;Suuuuuuuuuper !!!!!!!&amp;quot; endfunction  これで、起動時は最小限のpluginで爆速起動し、必要な時に &amp;lt;Space&amp;gt;s を押下することで超サイヤVimになれる。(全pluginをロードする)
遅かったWindows環境ではまだ試せていないが、New MacBook 12では、0.2sくらいの起動時間が0.15sにまで短縮された・・・！</description>
    </item>
    
    <item>
      <title>Set cursorline as needed</title>
      <link>http://yukimemi.github.io/post/2014-08-05_set-cursorline-as-needed/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-08-05_set-cursorline-as-needed/</guid>
      <description>これまで、 &amp;lsquo;cursorline&amp;rsquo; を必要な時にだけ有効にする - 永遠に未完成 を参考に、cursorlineの設定をしていたけど、時々cursorlineがずっと表示されたままになる現象が発生していた。
よくよく調べてみると、一度 CursorHold イベントを発生させ(set cursorline)、その後に別Windowへ移動し、さらに &amp;lt;C-^&amp;gt; でもとのバッファに戻ったときに、 s:cursorline_lock 変数が「0」のままとなり、その後 CursorMoved イベントが発生してもずっと set nocursorline されなくなるようだった。
そこで、 Lingr のvim部屋で初めて質問してみた。
そしたらあっさりと答えを教えてもらえた。vimmerは思ってたよりこわくなかった。よかた。
&amp;lt;C-^&amp;gt; では、 WinEnter イベントは発生しないが、 BufEnter イベントは発生するらしい。 また、僕は、 nnoremap : q:i のようにして、コマンドラインウィンドウを使うようにしているのだが、この場合も上記と同様に、cursorlineがずっと消えない事象が発生していた。 そこで、thincaさんの 設定 を以下のように、変更した。
au MyAutoCmd CursorMoved,CursorMovedI * call s:auto_cursorline(&#39;CursorMoved&#39;) au MyAutoCmd CursorHold,CursorHoldI * call s:auto_cursorline(&#39;CursorHold&#39;) au MyAutoCmd WinEnter,BufEnter,CmdwinLeave * call s:auto_cursorline(&#39;WinEnter,BufEnter,CmdwinLeave&#39;) au MyAutoCmd WinLeave * call s:auto_cursorline(&#39;WinLeave&#39;) let s:cursorline_lock = 0 function! s:auto_cursorline(event) if a:event ==# &#39;WinEnter,BufEnter,CmdwinLeave&#39; setlocal cursorline setlocal cursorcolumn let s:cursorline_lock = 2 elseif a:event ==# &#39;WinLeave&#39; setlocal nocursorline setlocal nocursorcolumn elseif a:event ==# &#39;CursorMoved&#39; if s:cursorline_lock if 1 &amp;lt; s:cursorline_lock let s:cursorline_lock = 1 else setlocal nocursorline setlocal nocursorcolumn let s:cursorline_lock = 0 endif endif elseif a:event ==# &#39;CursorHold&#39; if &amp;amp;updatetime &amp;gt;= 4000 setlocal cursorline setlocal cursorcolumn endif let s:cursorline_lock = 1 endif endfunction  ついでに cursorcolumn も追加しといた。 また、 TweetVim や、 calendar.</description>
    </item>
    
  </channel>
</rss>