<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim Plugin on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/vim-plugin/</link>
    <description>Recent content in Vim Plugin on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    
    
    
    <lastBuildDate>Sat, 08 Feb 2014 00:00:00 &#43;0000</lastBuildDate>
    <atom:link href="http://yukimemi.github.io/tags/vim-plugin/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>vim で powershell を書く！</title>
      <link>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</guid>
      <description>&lt;p&gt;この記事は、 &lt;a href=&#34;http://atnd.org/events/45072&#34;&gt;Vim Advent Calendar 2013&lt;/a&gt;
70日目の記事になります。&lt;/p&gt;

&lt;p&gt;vim で powershell を書く時の設定です。&lt;/p&gt;

&lt;p&gt;まず、 syntax と indent 。
これは、以下のプラグインでOK。(なんかインデントは変だけど・・・)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundleLazy &#39;PProvost/vim-ps1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、 vim から実行するために、 quickrun
を入れます。(これは定番ですね！)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundleLazy &#39;thinca/vim-quickrun&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっと前までは、powershell
でquickrunするためには、設定が必要だったけど、最近オフィシャルに対応されるようになったみたいです。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://qiita.com/rbtnn/items/ea441a77181d29188880&#34;&gt;VimとPowerShell - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで、powershellを書いてる時に、デフォルトだと &amp;lt;Leader&amp;gt;r
で実行できます。&lt;/p&gt;

&lt;p&gt;さらに、おもむろに以下のファイルを作成して、 header.cmd
というファイル名で保存。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
pushd &amp;quot;%~dp0&amp;quot; &amp;gt; nul
set tm=%time: =0%
set ps1file=%~n0___%date:~-10,4%%date:~-5,2%%date:~-2,2%_%tm:~0,2%%tm:~3,2%%tm:~6,2%%tm:~9,2%.ps1
for /f &amp;quot;usebackq skip=10 delims=&amp;quot; %%i in (&amp;quot;%~f0&amp;quot;) do @echo %%i &amp;gt;&amp;gt; &amp;quot;%ps1file%&amp;quot;
powershell -NoProfile -ExecutionPolicy unrestricted -File &amp;quot;%ps1file%&amp;quot; %*
del &amp;quot;%ps1file%&amp;quot;
popd &amp;gt; nul
pause
exit /b %ERRORLEVEL%
# ========== do ps1 file as a dosbatch ==========
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、以下の設定を .vimrc
に書いておくと、powershellスクリプトを手軽に実行できるバッチファイルが作成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let s:is_windows = has(&#39;win16&#39;) || has(&#39;win32&#39;) || has(&#39;win64&#39;)
let s:system = exists(&#39;g:loaded_vimproc&#39;) ? &#39;vimproc#system_bg&#39; : &#39;system&#39;

if neobundle#tap(&#39;vim-ps1&#39;)&amp;quot;{{{
    call neobundle#config({
                \ &#39;autoload&#39;: {
                \   &#39;filetypes&#39;: &#39;ps1&#39;
                \ }
                \ })

    function! neobundle#tapped.hooks.on_source(bundle)
        function! s:make_ps12cmd()
            if s:is_windows
                let s:com = &amp;quot;copy /b header.cmd + &amp;quot; . expand(&amp;quot;%:p:t&amp;quot;) . &amp;quot; &amp;quot; . expand(&amp;quot;%:p:t:r&amp;quot;) . &amp;quot;.cmd&amp;quot;
            else
                let s:com = &amp;quot;cat header.cmd &amp;quot; . expand(&amp;quot;%:p:t&amp;quot;) . &amp;quot; &amp;gt; &amp;quot; . expand(&amp;quot;%:p:t:r&amp;quot;) . &amp;quot;.cmd&amp;quot;
            endif
            echom(s:com)
            call {s:system}(s:com)
        endfunction
        au BufWritePost *.ps1 call s:make_ps12cmd()
    endfunction

    call neobundle#untap()
endif&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やってることは単純で、さっきの header.cmd と作成中の powershell
スクリプトを合体させてるだけです。 windows の場合は、 copy
コマンドで。LinuxやMac の場合は、 cat コマンドで。&lt;/p&gt;

&lt;p&gt;上記の設定では、保存時に自動で結合されて、元のpowershellファイルの拡張子が&amp;rdquo;cmd&amp;rdquo;になったものができあがります。&lt;/p&gt;

&lt;p&gt;例えば、以下の hello.ps1 をvim上で保存すると・・・&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;Write-Host &amp;quot;Hello ps1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな hello.cmd ができてるはずです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
pushd &amp;quot;%~dp0&amp;quot; &amp;gt; nul
set tm=%time: =0%
set ps1file=%~n0___%date:~-10,4%%date:~-5,2%%date:~-2,2%_%tm:~0,2%%tm:~3,2%%tm:~6,2%%tm:~9,2%.ps1
for /f &amp;quot;usebackq skip=10 delims=&amp;quot; %%i in (&amp;quot;%~f0&amp;quot;) do @echo %%i &amp;gt;&amp;gt; &amp;quot;%ps1file%&amp;quot;
powershell -NoProfile -ExecutionPolicy unrestricted -File &amp;quot;%ps1file%&amp;quot; %*
del &amp;quot;%ps1file%&amp;quot;
popd &amp;gt; nul
pause
exit /b %ERRORLEVEL%
# ========== do ps1 file as a dosbatch ==========

Write-Host &amp;quot;Hello ps1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルは、エクスプローラからダブルクリックで実行出来ます。
一時ファイルを作成してから実行しているのでダサいし、途中でスクリプトを強制終了すると一時ファイルが残ったままになるという致命的な問題はありますが、まぁちょっとしたスクリプトにはいいんではないでしょうか。&lt;/p&gt;

&lt;p&gt;ちなみに、 neobundle の tap と untap とかの設定は、 supermomonga
さんの
&lt;a href=&#34;http://blog.supermomonga.com/articles/vim/neobundle-sugoi-setting.html&#34;&gt;この記事&lt;/a&gt;
がすごい参考になります。かなりすごいです。かなり。&lt;/p&gt;

&lt;p&gt;さらにこの保存時に結合っていう方法を使えば、例えば先頭行にコメントで
import文みたいなのを入れておけば、動的に複数のpowershell
スクリプトを結合して、一つのバッチファイルにする・・・ってなこともできると思います。(誰かお願いします)&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim indentLine で見やすいインデントを</title>
      <link>http://yukimemi.github.io/post/2014-01-18-vim_indentline/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 &#43;0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-01-18-vim_indentline/</guid>
      <description>&lt;p&gt;vim には、見やすい定番のインデントプラグインとして、
&lt;a href=&#34;https://github.com/nathanaelkane/vim-indent-guides&#34;&gt;nathanaelkane/vim-indent-guides&lt;/a&gt;
がある。&lt;/p&gt;

&lt;p&gt;しかし、最近、
&lt;a href=&#34;https://github.com/Yggdroot/indentLine&#34;&gt;Yggdroot/indentLine&lt;/a&gt;
というプラグイン が、 &lt;a href=&#34;http://alpaca.tc/blog/vim/plugins-best-of-vim-1.html&#34;&gt;オススメなVimのプラグイン紹介 - RailsとRubyとVimのブログ&lt;/a&gt;
で紹介されていたので、乗り換えた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/20140119_002810.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;シンプルでかっこいい。 それに、 vim-indent-guides は、 indent
をタブで記述してあるファイルの時の表示がタブ全部が色塗られてしまって見難い。&lt;/p&gt;

&lt;p&gt;個人的にはタブを使用することはなくて、スペースを使用するから問題ないのだけれども・・・。&lt;/p&gt;

&lt;p&gt;その点、 &lt;a href=&#34;https://github.com/Yggdroot/indentLine&#34;&gt;indentLine&lt;/a&gt;
では、スペースしか対応してなく、タブの場合は何もしない。&lt;/p&gt;

&lt;p&gt;README にも記載があるが、タブで同じことやるためには、 .vimrc
に、以下の記載を加えればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set list listchars=tab:\¦\
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後にスペースが入っていることに注意。&lt;/p&gt;

&lt;p&gt;こうすると、スペースの場合とほぼ同じように表示される。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/20140119_135554.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ただ、一つ目のインデントからも表示されるのが不満。2行目からのみ表示されるように出来ないものか・・・。&lt;/p&gt;

&lt;p&gt;また、インデントを除外したい場合は、その filetype
を設定してやればいいみたい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:indentLine_fileTypeExclude = [&#39;help&#39;, &#39;nerdtree&#39;, &#39;calendar&#39;, &#39;thumbnail&#39;, &#39;tweetvim&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>powershell vim plugin</title>
      <link>http://yukimemi.github.io/post/2013-10-13-powershell_vim_plugin/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 &#43;0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-10-13-powershell_vim_plugin/</guid>
      <description>&lt;p&gt;powershell script を vim で書くためのプラグイン&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundleLazy &#39;PProvost/vim-ps1&#39;, {
      \   &#39;autoload&#39; : {&#39;filetypes&#39;: [&#39;ps1&#39;]}
      \ }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>