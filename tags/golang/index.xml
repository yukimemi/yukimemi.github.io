<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/golang/</link>
    <description>Recent content in Golang on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 19 Mar 2017 00:00:07 +0900</lastBuildDate>
    
	<atom:link href="http://yukimemi.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git status recurse</title>
      <link>http://yukimemi.github.io/post/2017-03-19_git-status-recurse/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:07 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-03-19_git-status-recurse/</guid>
      <description>git status を再帰的に全Gitディレクトリで実行して、変更のあるリポジトリを簡単に見つけたい。
と思ったので作りました。
yukimemi/gsr
go get でインストールできます。
(バイナリファイルもそのうち用意する)
$ go get github.com/yukimemi/gsr  使い方は簡単で
$ gsr [再帰的にチェックしたいディレクトリ]  とすると、 git status で変更のあるディレクトリだけ出力されます。 デフォルトでは、ディレクトリ名だけが出力されます。
$ gsr --status [再帰的にチェックしたいディレクトリ]  と、オプションをつけると、 git status --short の出力結果も出力されます。
ちなみに、 [再帰的にチェックしたいディレクトリ] を指定しなかった場合、 ghq root を対象にチェックします。
motemen/ghq を使っている人には便利です。
デフォルトの出力がディレクトリ名なのは、pecoとか使って移動したいからです。
例えば、 .zshrc に、こんな設定を書いてやると、
function __filter() { peco | while read line do echo &amp;quot;Exec: [$@ $line]&amp;quot; $@ $line done } alias gsrl=&#39;gsr | __filter cd&#39; alias ghl=&#39;gsr --all | __filter cd&#39;  gsrl で、 ghq で管理された変更のあるgitディレクトリに移動出来るようになり、 ghl で ghq で管理されたすべてのディレクトリに移動出来るようになります。</description>
    </item>
    
    <item>
      <title>Use gomi instead of rm</title>
      <link>http://yukimemi.github.io/post/2015-05-04_use-gomi/</link>
      <pubDate>Mon, 04 May 2015 17:14:11 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-04_use-gomi/</guid>
      <description>rmを安全に行うツールとして、Macでは「rmtrash」、Linuxでは「trash-cli」を使ってきたけど、最近Golangで「gomi」というツールが作成されたとのことなので使用してみた。 とても便利。
インストールはgo get。
$ go get -u github.com/b4b4r07/gomi  さっそくaliasした。
$ alias rm=&#39;gomi&#39;  </description>
    </item>
    
    <item>
      <title>hello hugo</title>
      <link>http://yukimemi.github.io/post/2015-02-15_hello-hugo/</link>
      <pubDate>Sun, 15 Feb 2015 10:28:27 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-02-15_hello-hugo/</guid>
      <description>これまでいろいろ静的サイトジェネレーターを試してきた。
Tinkerer roots そして今回はgolang製の hugo
hugo 流行りに乗ってみたいってのもあるけど、なによりサイト生成がはやい！！
これだけでも乗り換える価値があると思う。
参考 OctopressからHugoへ移行した
WordPress から Hugo に乗り換えました</description>
    </item>
    
    <item>
      <title>direnv for npm local commands</title>
      <link>http://yukimemi.github.io/post/2014-07-02_direnv-for-npm-local-commands/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-07-02_direnv-for-npm-local-commands/</guid>
      <description>通常、 npm で実行コマンドをインストールするときは、以下のようにグローバルオプションを つけてインストールすることが多いと思う。
$ npm install -g gulp  だけど、これではプロジェクトごとに違うバージョンを使いたい！などの場合にこまる。 そこで direnv 。
これを使うとあるディレクトリでは、「〜〜する」というのが簡単に出来る。
導入方法 まず、 direnv はgoを使うので、goをインストールしておく。
$ brew install go --cross-compile-common  以下を .zshenv に記載。
# direnv if which go &amp;gt; /dev/null; then if [ ! -d $HOME/.direnv ]; then git clone https://github.com/zimbatm/direnv ~/.direnv pushd ~/.direnv make install popd fi eval &amp;quot;$(direnv hook zsh)&amp;quot; fi  あとはシェルを再起動したらインストール完了。
使い方 プロジェクトのディレクトリでローカルにnpmのコマンドをインストールする。
$ npm install gulp  ローカルにインストールした場合、通常以下の場所に実行コマンドが配置される。
$ ls node_modules/.</description>
    </item>
    
    <item>
      <title>All You Need Is Peco</title>
      <link>http://yukimemi.github.io/post/2014-06-29_all-you-need-is-peco/</link>
      <pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-06-29_all-you-need-is-peco/</guid>
      <description>最近 peco がかなり流行りっぽい。 そこで導入してみた。思ったより使い心地よくて、 zaw から乗り換えた。
導入手順 homebrewでgoをインストール。
$ brew install go --cross-compile-common  .zshenv に以下を記載。
# go export GOPATH=$HOME/.go export PATH=$GOPATH/bin:$PATH [ ! -d $GOPATH ] &amp;amp;&amp;amp; mkdir $GOPATH if which go &amp;gt; /dev/null; then export GOROOT=$(go env GOROOT) # ghq go get github.com/motemen/ghq git config --global ghq.root ~/.ghq # peco go get github.com/peco/peco/cmd/peco # gh-open go get github.com/typester/gh-open fi  .zshenv を読み込み直す
$ source ~/.zshenv  インストール完了。</description>
    </item>
    
    <item>
      <title>golang git 管理のすべてのディレクトリで 「git status」する</title>
      <link>http://yukimemi.github.io/post/2014-03-22-gitstatus/</link>
      <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-03-22-gitstatus/</guid>
      <description>Go言語が流行りっぽいので、Goを使って、カレントディレクトリ配下の、gitで管理されているすべてのディレクトリで「git status」を実行するプログラムを書いてみた。 別にGoで書く必要はないんだけど・・・。
yukimemi/gitstatus
$ gitstatus yukimemi  みたいにすると、「gitstatus」を実行したディレクトリ配下で、「git remote -v」に「yukimemi」が含まれるものを対象に、「git status」を実行して出力する。引数を指定しなければ、すべてのディレクトリで。
出力イメージはこんな感じ。
root /Users/yukimemi -------------------------------------------------------------------------------- ★ /Users/yukimemi/.oh-my-zsh On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed) (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory) modified: templates/zshrc.zsh-template no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;) -------------------------------------------------------------------------------- -------------------------------------------------------------------------------- ★ /Users/yukimemi/Documents/git/go On branch master Your branch is up-to-date with &#39;origin/master&#39;.</description>
    </item>
    
  </channel>
</rss>