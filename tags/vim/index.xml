<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/vim/</link>
    <description>Recent content in Vim on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 02 May 2015 22:59:12 +0900</lastBuildDate>
    <atom:link href="http://yukimemi.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mayu for IME off in vim</title>
      <link>http://yukimemi.github.io/post/2015-05-02_Mayu%20for%20IME%20off%20in%20vim/</link>
      <pubDate>Sat, 02 May 2015 22:59:12 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-02_Mayu%20for%20IME%20off%20in%20vim/</guid>
      <description>

&lt;p&gt;vimを使っていて困るのがIMEの制御。特に、ノーマルモードに戻った時に自動でIMEがOFFになってくれないと、画面に「jっっっｘ」とかがあふれる。
Macでは、「karabiner」というソフトを使って、「Escape」もしくは、「Ctrl + [」を押下した時に自動でIMEをOFFにすることが出来ていた。&lt;/p&gt;

&lt;p&gt;Linuxでも同じことが出来ないかといろいろググってはみたものの、意外とこれ！ってのが見つからない。
そんな中、一応要望を満たせるのが、「Mayu」というソフトだった。&lt;/p&gt;

&lt;p&gt;Windowsで「窓使いの憂鬱」と呼ばれてたソフトで、Linuxにも対応してるっぽい。&lt;/p&gt;

&lt;p&gt;設定自体は単純なんだけど、キーボードのキーコードを全部定義しなきゃいけないみたいで、それがめんどくさそうだった。
幸いにも、全部をスキャンしたファイルをアップしてくれている人がいたので、使用させてもらった。
一部、MacBookAirのキーコードに対応していなかったものがあったため、少し改変している。&lt;/p&gt;

&lt;h3 id=&#34;mayuのインストール:83043f7e85625bcb6030d80110ca1e46&#34;&gt;Mayuのインストール&lt;/h3&gt;

&lt;p&gt;Mayuはソースコードのみ配布されているので、自分でビルドする必要がある。
Ubuntu 15.04では以下の通りにやるとビルド出来た。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghq get https://github.com/kenhys/mayu.git
$ cd ~/.ghq/src/github.com/kenhys/mayu
$ sudo aptitude install build-essential libboost-iostreams-dev libudev-dev libusb-1.0-0-dev
$ ./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu/
$ make
$ sudo make install
$ sudo chmod +s /usr/local/bin/mayu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mayuはroot権限で実行する必要があり、systemd経由で自動起動させるためにsetuidをたてている。
本当はvisudoとかでmayuのみパスワードなしsudo出来るようにしたりとかのがいいのかもしれないけど、めんどくさいので・・・。&lt;/p&gt;

&lt;h3 id=&#34;fcitx設定:83043f7e85625bcb6030d80110ca1e46&#34;&gt;fcitx設定&lt;/h3&gt;

&lt;p&gt;今回やりたいのは、「Escape」を押下した時にIMEをオフにする、もしくは「Crtl-[」を押下した時にIMEをオフにするということ。
前提として、Ubuntu 15.04では、IMEとしてfcitx-mozcを使用している。&lt;/p&gt;

&lt;p&gt;それから、fcitxの設定で、「入力メソッドをオンに」を「Hangul」(かなキー)、入力メソッドをオフ」に「Hangulhanja」(英数キー)を割り当てる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/fcitx-setting_min.png&#34; alt=&#34;fcitx-setting&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;mayu設定:83043f7e85625bcb6030d80110ca1e46&#34;&gt;Mayu設定&lt;/h3&gt;

&lt;p&gt;次に、mayuの設定を書く。上記のようにfcitxの設定をしているのであれば、mayuの設定としては以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;def key Esc Escape = 0x01
def key Eisu = 0x7b

key Esc = Esc Eisu
key C-OpenBracket = C-OpenBracket Eisu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「Escape」が押された時に、「Escape」、「英数」を押し、「Ctrl-[」が押された時に、「Ctrl-[」、「英数」を押すという設定。&lt;/p&gt;

&lt;p&gt;ただ、mayuでは、一通りキーボード上のキーは全てdefしなきゃいけないみたいで、ネット上に公開してくださっているありがたい方の &lt;a href=&#34;http://d.hatena.ne.jp/OKIIZO/20080106/1199639459&#34;&gt;キーコード一覧&lt;/a&gt; を使用させてもらった。&lt;/p&gt;

&lt;p&gt;一部、MacBookAirのキーコードと違う部分があったので、改変している。 &lt;a href=&#34;https://raw.githubusercontent.com/yukimemi/dotfiles/master/.mayu&#34;&gt;mayu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この設定ファイルをHOMEに「.mayu」として置く。
その後、mayuをルート権限で実行する。&lt;/p&gt;

&lt;p&gt;これでvim上でもシェル上でも、どこでも同じようにIMEがオフになるようになる。&lt;/p&gt;

&lt;p&gt;あと、キーボードでキーコード一覧に記載されていないものがあった場合、mayuの標準出力にキーコードが表示される。それをメモして、設定ファイルに適当な名前で「def key hoge = 0xXX」とかしてやれば大丈夫。&lt;/p&gt;

&lt;h3 id=&#34;mayu自動起動:83043f7e85625bcb6030d80110ca1e46&#34;&gt;Mayu自動起動&lt;/h3&gt;

&lt;p&gt;システム起動時に自動でmayuが起動するように、systemdに登録する。&lt;/p&gt;

&lt;p&gt;userごとの自動起動設定としたいため、以下のファイルをまず作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir -p ~/.config/systemd/user
$ vim ~/.config/systemd/user/mayu.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「mayu.service」の中身はこんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[Unit]
Description=mayu keyboard hack

[Service]
ExecStart=/usr/local/bin/mayu

[Install]
WantedBy=default.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、以下のようにして登録する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ systemctl --user daemon-reload
$ systemctl --user list-unit-files
UNIT FILE            STATE
mayu.service         disabled
systemd-exit.service static
basic.target         static
bluetooth.target     static
default.target       static
exit.target          disabled
paths.target         static
printer.target       static
shutdown.target      static
smartcard.target     static
sockets.target       static
sound.target         static
timers.target        static

13 unit files listed.

$ systemctl --user enable mayu.service
$ systemctl --user list-unit-files
UNIT FILE            STATE
mayu.service         enabled
systemd-exit.service static
basic.target         static
bluetooth.target     static
default.target       static
exit.target          disabled
paths.target         static
printer.target       static
shutdown.target      static
smartcard.target     static
sockets.target       static
sound.target         static
timers.target        static

13 unit files listed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;systemdとして正しく起動しているか確かめる場合は、ログを見る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ journalctl
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Starting Basic System.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Started mayu keyboard hack.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Starting mayu keyboard hack...
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Reached target Default.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Startup finished in 44ms.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1]: Started User Manager for UID 1000.
5月 02 08:57:56 yukimemi-MacBookAir systemd[1372]: Starting Default.
5月 02 08:57:56 yukimemi-MacBookAir kernel: input: mayu uinpt as /devices/virtual/input/input14
5月 02 08:57:56 yukimemi-MacBookAir mayu[1386]: loading: /home/yukimemi/.mayu
5月 02 08:57:58 yukimemi-MacBookAir mayu[1386]: successfully loaded.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。
だいぶ使いやすくなった。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考:83043f7e85625bcb6030d80110ca1e46&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/sharow/items/e8f7d3e0628d7ee925db&#34;&gt;systemdでの定期実行(timerユニット) - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/OKIIZO/20080106/1199639459&#34;&gt;新型Apple Keyboard微妙 - どんごどんご&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kenhys/mayu&#34;&gt;kenhys/mayu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://symfoware.blog68.fc2.com/blog-entry-1397.html&#34;&gt;Ubuntu 14.04にMozcと窓使いの憂鬱をインストールする - Symfoware&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set cursorline as needed</title>
      <link>http://yukimemi.github.io/post/2014-08-05_Set%20cursorline%20as%20needed/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-08-05_Set%20cursorline%20as%20needed/</guid>
      <description>&lt;p&gt;これまで、 &lt;a href=&#34;http://d.hatena.ne.jp/thinca/20090530/1243615055&#34;&gt;&amp;lsquo;cursorline&amp;rsquo; を必要な時にだけ有効にする - 永遠に未完成&lt;/a&gt; を参考に、cursorlineの設定をしていたけど、時々cursorlineがずっと表示されたままになる現象が発生していた。&lt;/p&gt;

&lt;p&gt;よくよく調べてみると、一度 CursorHold イベントを発生させ(set cursorline)、その後に別Windowへ移動し、さらに &lt;code&gt;&amp;lt;C-^&amp;gt;&lt;/code&gt; でもとのバッファに戻ったときに、 &lt;code&gt;s:cursorline_lock&lt;/code&gt; 変数が「0」のままとなり、その後 CursorMoved イベントが発生してもずっと &lt;code&gt;set nocursorline&lt;/code&gt; されなくなるようだった。&lt;/p&gt;

&lt;p&gt;そこで、 Lingr のvim部屋で初めて質問してみた。&lt;/p&gt;

&lt;p&gt;そしたらあっさりと答えを教えてもらえた。vimmerは思ってたよりこわくなかった。よかた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;C-^&amp;gt;&lt;/code&gt; では、 &lt;code&gt;WinEnter&lt;/code&gt; イベントは発生しないが、 &lt;code&gt;BufEnter&lt;/code&gt; イベントは発生するらしい。
また、僕は、 &lt;code&gt;nnoremap : q:i&lt;/code&gt; のようにして、コマンドラインウィンドウを使うようにしているのだが、この場合も上記と同様に、cursorlineがずっと消えない事象が発生していた。
そこで、thincaさんの &lt;a href=&#34;http://d.hatena.ne.jp/thinca/20090530/1243615055&#34;&gt;設定&lt;/a&gt; を以下のように、変更した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au MyAutoCmd CursorMoved,CursorMovedI * call s:auto_cursorline(&#39;CursorMoved&#39;)
au MyAutoCmd CursorHold,CursorHoldI * call s:auto_cursorline(&#39;CursorHold&#39;)
au MyAutoCmd WinEnter,BufEnter,CmdwinLeave * call s:auto_cursorline(&#39;WinEnter,BufEnter,CmdwinLeave&#39;)
au MyAutoCmd WinLeave * call s:auto_cursorline(&#39;WinLeave&#39;)

let s:cursorline_lock = 0
function! s:auto_cursorline(event)
  if a:event ==# &#39;WinEnter,BufEnter,CmdwinLeave&#39;
    setlocal cursorline
    setlocal cursorcolumn
    let s:cursorline_lock = 2
  elseif a:event ==# &#39;WinLeave&#39;
    setlocal nocursorline
    setlocal nocursorcolumn
  elseif a:event ==# &#39;CursorMoved&#39;
    if s:cursorline_lock
      if 1 &amp;lt; s:cursorline_lock
        let s:cursorline_lock = 1
      else
        setlocal nocursorline
        setlocal nocursorcolumn
        let s:cursorline_lock = 0
      endif
    endif
  elseif a:event ==# &#39;CursorHold&#39;
    if &amp;amp;updatetime &amp;gt;= 4000
      setlocal cursorline
      setlocal cursorcolumn
    endif
    let s:cursorline_lock = 1
  endif
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついでに &lt;code&gt;cursorcolumn&lt;/code&gt; も追加しといた。
また、 &lt;a href=&#34;https://github.com/basyura/TweetVim&#34;&gt;TweetVim&lt;/a&gt; や、 &lt;a href=&#34;https://github.com/itchyny/calendar.vim&#34;&gt;calendar.vim&lt;/a&gt; では、 updatetime が短すぎるため、すぐに &lt;code&gt;CursorHold&lt;/code&gt; イベントが発生してしまう。なので、通常の updatetime (4000) 以上の場合だけ、 &lt;code&gt;set cursorline&lt;/code&gt; するようにしている。&lt;/p&gt;

&lt;p&gt;こんないろんな設定出来るvimすごい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim で powershell を書く！</title>
      <link>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</guid>
      <description>&lt;p&gt;この記事は、 &lt;a href=&#34;http://atnd.org/events/45072&#34;&gt;Vim Advent Calendar 2013&lt;/a&gt;
70日目の記事になります。&lt;/p&gt;

&lt;p&gt;vim で powershell を書く時の設定です。&lt;/p&gt;

&lt;p&gt;まず、 syntax と indent 。
これは、以下のプラグインでOK。(なんかインデントは変だけど・・・)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundleLazy &#39;PProvost/vim-ps1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、 vim から実行するために、 quickrun
を入れます。(これは定番ですね！)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundleLazy &#39;thinca/vim-quickrun&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっと前までは、powershell
でquickrunするためには、設定が必要だったけど、最近オフィシャルに対応されるようになったみたいです。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://qiita.com/rbtnn/items/ea441a77181d29188880&#34;&gt;VimとPowerShell - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで、powershellを書いてる時に、デフォルトだと &amp;lt;Leader&amp;gt;r
で実行できます。&lt;/p&gt;

&lt;p&gt;さらに、おもむろに以下のファイルを作成して、 header.cmd
というファイル名で保存。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
pushd &amp;quot;%~dp0&amp;quot; &amp;gt; nul
set tm=%time: =0%
set ps1file=%~n0___%date:~-10,4%%date:~-5,2%%date:~-2,2%_%tm:~0,2%%tm:~3,2%%tm:~6,2%%tm:~9,2%.ps1
for /f &amp;quot;usebackq skip=10 delims=&amp;quot; %%i in (&amp;quot;%~f0&amp;quot;) do @echo %%i &amp;gt;&amp;gt; &amp;quot;%ps1file%&amp;quot;
powershell -NoProfile -ExecutionPolicy unrestricted -File &amp;quot;%ps1file%&amp;quot; %*
del &amp;quot;%ps1file%&amp;quot;
popd &amp;gt; nul
pause
exit /b %ERRORLEVEL%
# ========== do ps1 file as a dosbatch ==========
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、以下の設定を .vimrc
に書いておくと、powershellスクリプトを手軽に実行できるバッチファイルが作成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let s:is_windows = has(&#39;win16&#39;) || has(&#39;win32&#39;) || has(&#39;win64&#39;)
let s:system = exists(&#39;g:loaded_vimproc&#39;) ? &#39;vimproc#system_bg&#39; : &#39;system&#39;

if neobundle#tap(&#39;vim-ps1&#39;)&amp;quot;{{{
    call neobundle#config({
                \ &#39;autoload&#39;: {
                \   &#39;filetypes&#39;: &#39;ps1&#39;
                \ }
                \ })

    function! neobundle#tapped.hooks.on_source(bundle)
        function! s:make_ps12cmd()
            if s:is_windows
                let s:com = &amp;quot;copy /b header.cmd + &amp;quot; . expand(&amp;quot;%:p:t&amp;quot;) . &amp;quot; &amp;quot; . expand(&amp;quot;%:p:t:r&amp;quot;) . &amp;quot;.cmd&amp;quot;
            else
                let s:com = &amp;quot;cat header.cmd &amp;quot; . expand(&amp;quot;%:p:t&amp;quot;) . &amp;quot; &amp;gt; &amp;quot; . expand(&amp;quot;%:p:t:r&amp;quot;) . &amp;quot;.cmd&amp;quot;
            endif
            echom(s:com)
            call {s:system}(s:com)
        endfunction
        au BufWritePost *.ps1 call s:make_ps12cmd()
    endfunction

    call neobundle#untap()
endif&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やってることは単純で、さっきの header.cmd と作成中の powershell
スクリプトを合体させてるだけです。 windows の場合は、 copy
コマンドで。LinuxやMac の場合は、 cat コマンドで。&lt;/p&gt;

&lt;p&gt;上記の設定では、保存時に自動で結合されて、元のpowershellファイルの拡張子が&amp;rdquo;cmd&amp;rdquo;になったものができあがります。&lt;/p&gt;

&lt;p&gt;例えば、以下の hello.ps1 をvim上で保存すると・・・&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;Write-Host &amp;quot;Hello ps1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな hello.cmd ができてるはずです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
pushd &amp;quot;%~dp0&amp;quot; &amp;gt; nul
set tm=%time: =0%
set ps1file=%~n0___%date:~-10,4%%date:~-5,2%%date:~-2,2%_%tm:~0,2%%tm:~3,2%%tm:~6,2%%tm:~9,2%.ps1
for /f &amp;quot;usebackq skip=10 delims=&amp;quot; %%i in (&amp;quot;%~f0&amp;quot;) do @echo %%i &amp;gt;&amp;gt; &amp;quot;%ps1file%&amp;quot;
powershell -NoProfile -ExecutionPolicy unrestricted -File &amp;quot;%ps1file%&amp;quot; %*
del &amp;quot;%ps1file%&amp;quot;
popd &amp;gt; nul
pause
exit /b %ERRORLEVEL%
# ========== do ps1 file as a dosbatch ==========

Write-Host &amp;quot;Hello ps1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルは、エクスプローラからダブルクリックで実行出来ます。
一時ファイルを作成してから実行しているのでダサいし、途中でスクリプトを強制終了すると一時ファイルが残ったままになるという致命的な問題はありますが、まぁちょっとしたスクリプトにはいいんではないでしょうか。&lt;/p&gt;

&lt;p&gt;ちなみに、 neobundle の tap と untap とかの設定は、 supermomonga
さんの
&lt;a href=&#34;http://blog.supermomonga.com/articles/vim/neobundle-sugoi-setting.html&#34;&gt;この記事&lt;/a&gt;
がすごい参考になります。かなりすごいです。かなり。&lt;/p&gt;

&lt;p&gt;さらにこの保存時に結合っていう方法を使えば、例えば先頭行にコメントで
import文みたいなのを入れておけば、動的に複数のpowershell
スクリプトを結合して、一つのバッチファイルにする・・・ってなこともできると思います。(誰かお願いします)&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim indentLine で見やすいインデントを</title>
      <link>http://yukimemi.github.io/post/2014-01-18-vim_indentline/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-01-18-vim_indentline/</guid>
      <description>&lt;p&gt;vim には、見やすい定番のインデントプラグインとして、
&lt;a href=&#34;https://github.com/nathanaelkane/vim-indent-guides&#34;&gt;nathanaelkane/vim-indent-guides&lt;/a&gt;
がある。&lt;/p&gt;

&lt;p&gt;しかし、最近、
&lt;a href=&#34;https://github.com/Yggdroot/indentLine&#34;&gt;Yggdroot/indentLine&lt;/a&gt;
というプラグイン が、 &lt;a href=&#34;http://alpaca.tc/blog/vim/plugins-best-of-vim-1.html&#34;&gt;オススメなVimのプラグイン紹介 - RailsとRubyとVimのブログ&lt;/a&gt;
で紹介されていたので、乗り換えた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/20140119_002810.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;シンプルでかっこいい。 それに、 vim-indent-guides は、 indent
をタブで記述してあるファイルの時の表示がタブ全部が色塗られてしまって見難い。&lt;/p&gt;

&lt;p&gt;個人的にはタブを使用することはなくて、スペースを使用するから問題ないのだけれども・・・。&lt;/p&gt;

&lt;p&gt;その点、 &lt;a href=&#34;https://github.com/Yggdroot/indentLine&#34;&gt;indentLine&lt;/a&gt;
では、スペースしか対応してなく、タブの場合は何もしない。&lt;/p&gt;

&lt;p&gt;README にも記載があるが、タブで同じことやるためには、 .vimrc
に、以下の記載を加えればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set list listchars=tab:\¦\
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後にスペースが入っていることに注意。&lt;/p&gt;

&lt;p&gt;こうすると、スペースの場合とほぼ同じように表示される。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/20140119_135554.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ただ、一つ目のインデントからも表示されるのが不満。2行目からのみ表示されるように出来ないものか・・・。&lt;/p&gt;

&lt;p&gt;また、インデントを除外したい場合は、その filetype
を設定してやればいいみたい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:indentLine_fileTypeExclude = [&#39;help&#39;, &#39;nerdtree&#39;, &#39;calendar&#39;, &#39;thumbnail&#39;, &#39;tweetvim&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>powershell vim plugin</title>
      <link>http://yukimemi.github.io/post/2013-10-13-powershell_vim_plugin/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-10-13-powershell_vim_plugin/</guid>
      <description>&lt;p&gt;powershell script を vim で書くためのプラグイン&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundleLazy &#39;PProvost/vim-ps1&#39;, {
      \   &#39;autoload&#39; : {&#39;filetypes&#39;: [&#39;ps1&#39;]}
      \ }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>vim-automatic &lt;C-[&gt;&lt;C-[&gt; でウィンドウクローズ</title>
      <link>http://yukimemi.github.io/post/2013-09-15-automatic_vim/</link>
      <pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-09-15-automatic_vim/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/osyo-manga/vim-automatic&#34;&gt;automatic.vim&lt;/a&gt;
という便利なプラギンがある。&lt;/p&gt;

&lt;p&gt;これを利用すると、 Unite や QuickFix や help
など、様々なウィンドウを一元管理出来るっぽい。&lt;/p&gt;

&lt;p&gt;そこで、いろんなサイトを参考にやってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; ESC2回押しで検索ハイライトを消去
autocm MyAutoCmd VimEnter,WinEnter,WinLeave * nmap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;&amp;lt;Plug&amp;gt;(anzu-clear-search-status)

&amp;quot; vim-automatic {{{
function! s:my_temporary_window_init(config, context)
    silent! nunmap &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt;
    nmap &amp;lt;buffer&amp;gt; &amp;lt;C-[&amp;gt; :&amp;lt;C-u&amp;gt;q&amp;lt;CR&amp;gt;
    nmap &amp;lt;buffer&amp;gt; &amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;q&amp;lt;CR&amp;gt;
endfunction

let g:automatic_default_match_config = {
            \   &#39;is_open_other_window&#39;: 1
            \ }
let g:automatic_default_set_config = {
            \   &#39;height&#39;: &#39;60%&#39;,
            \   &#39;move&#39;: &#39;bottom&#39;,
            \   &#39;apply&#39;: function(&#39;s:my_temporary_window_init&#39;)
            \ }
let g:automatic_config = [
            \   {&#39;match&#39;: {&#39;buftype&#39;: &#39;help&#39;}},
            \   {&#39;match&#39;: {&#39;bufname&#39;: &#39;^.vimshell&#39;}},
            \   {&#39;match&#39;: {&#39;bufname&#39;: &#39;[\[\*]unite[\]\*]&#39;}},
            \   {
            \       &#39;match&#39;: {
            \           &#39;filetype&#39;: &#39;qf&#39;,
            \           &#39;autocmds&#39;: [&#39;FileType&#39;]
            \       },
            \   },
            \   {
            \       &#39;match&#39;: {
            \           &#39;filetype&#39;: &#39;\v^ref-.+&#39;,
            \           &#39;autocmds&#39;: [&#39;FileType&#39;]
            \       }
            \   },
            \   {
            \       &#39;match&#39;: {
            \           &#39;bufname&#39;: &#39;\[quickrun output\]&#39;
            \       },
            \       &#39;set&#39;: {
            \           &#39;height&#39;: 8
            \       }
            \   },
            \   {
            \       &#39;match&#39;: {
            \           &#39;autocmds&#39;: [&#39;CmdwinEnter&#39;]
            \       },
            \       &#39;set&#39;: {
            \           &#39;is_close_focus_out&#39;: 1,
            \           &#39;unsettings&#39;: [&#39;move&#39;, &#39;resize&#39;]
            \       }
            \   }
            \ ]
&amp;quot; }}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、 Unite 、 QuickFix 、 help で、 &lt;code&gt;&amp;lt;C-[&amp;gt;&amp;lt;C-[&amp;gt;&lt;/code&gt;
を押すと閉じることが出来る。 &lt;code&gt;&amp;lt;C-[&amp;gt;&amp;lt;C-[&amp;gt;&lt;/code&gt;
で検索後のハイライトを消すというマッピングを行っているため、わざわざ一回マッピング削除して
さらにもう一回設定みたいなことをやってるのがなんかカッコ悪い・・・。&lt;/p&gt;

&lt;p&gt;もうちょっとうまく出来ると思うんだけど、 vim 力足りず・・・。&lt;/p&gt;

&lt;h5 id=&#34;参考:f4572b3d00f460adf89934561bf9dd64&#34;&gt;参考:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.supermomonga.com/articles/vim/automatic.html&#34;&gt;automatic.vimでウィンドウの一時的分割をハンドリングしよう |かなりすごいブログ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osyo-manga/vim-automatic&#34;&gt;osyo-manga/vim-automatic GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim coffeescript syntastic</title>
      <link>http://yukimemi.github.io/post/2013-08-11-syntastic_coffeelint/</link>
      <pubDate>Sun, 11 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-08-11-syntastic_coffeelint/</guid>
      <description>&lt;p&gt;vim で保存時に自動で構文チェックとかを行なってくれるプラギンに
Syntastic というものがある。&lt;/p&gt;

&lt;p&gt;coffeescript を書く時も、これを使うと便利。&lt;/p&gt;

&lt;p&gt;インストールは NeoBundle で一発。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundle &#39;scrooloose/syntastic.git&#39;, {
            \ &#39;build&#39;: {
            \   &#39;mac&#39;: [&#39;pip install pyflake&#39;, &#39;npm -g install coffeelint&#39;],
            \   &#39;unix&#39;: [&#39;pip install pyflake&#39;, &#39;npm -g install coffeelint&#39;]
            \ }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように書いておけば、 Syntastic をインストールする時に自動で、
pyflake と coffeelint をインストールしてくれる。 NeoBundle
すごい。&lt;/p&gt;

&lt;p&gt;後は普通にコードを書いて、保存すると、自動でエラー行にチェックがつく。
エラーの内容を見たい時は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Errors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンドでおｋ&lt;/p&gt;

&lt;p&gt;coffeelint はデフォルトでインデントは 2 みたい。&lt;/p&gt;

&lt;p&gt;.vimrc に以下のように書いておいた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd MyAutoCmd BufNewFile,BufRead .coffee setl ft=coffee fenc=utf8 ff=unix tabstop=4 shiftwidth=2 softtabstop=2 expandtab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、1行の長さが 80文字
を超えてもエラーになるのが邪魔だったので、これは無視したい。&lt;/p&gt;

&lt;p&gt;以下のファイルの内容を変更すれば、無視することが出来た。(もっとスマートなやり方があるかもしれない。誰か教えてください。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;$ vim ~/.nodebrew/current/lib/node_modules/coffeelint/lib/coffeelint.js
 max_line_length: {
   value: 80,
   -level: ERROR,
   +level: IGNORE,
   message: &#39;Line exceeds maximum allowed length&#39;
 },
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>qfixhowm Vim でメモ</title>
      <link>http://yukimemi.github.io/post/2013-06-29-qfixhowm/</link>
      <pubDate>Sat, 29 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-06-29-qfixhowm/</guid>
      <description>

&lt;p&gt;vimでメモをとる場合、簡単な設定では vimrc に JunkFile
コマンドを定義するなどする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; JunkFile {{{
&amp;quot; http://vim-users.jp/2010/11/hack181/
  &amp;quot;&amp;quot; Open junk file.
  command! -nargs=0 JunkFile call s:open_junk_file()
  function! s:open_junk_file()
    let l:junk_dir = $HOME . &#39;/.vim_junk&#39;. strftime(&#39;/%Y/%m&#39;)
    if !isdirectory(l:junk_dir)
      call mkdir(l:junk_dir, &#39;p&#39;)
    endif

    let l:filename = input(&#39;Junk Code: &#39;, l:junk_dir.strftime(&#39;/%Y-%m-%d-%H%M%S.&#39;))
    if l:filename != &#39;&#39;
      execute &#39;edit &#39; . l:filename
    endif
  endfunction
  &amp;quot; }}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは実行時に拡張子が自由に設定出来るので、簡単にスクリプトを試してみたい場合
はとても便利。&lt;/p&gt;

&lt;p&gt;でも、やっぱり最近、メモは統合的に管理したいと思い、 QfixHowm
を導入することにした。&lt;/p&gt;

&lt;h3 id=&#34;インストール:24b8e55833fae809ad1fe864f6f928a4&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;Neobundle で一発&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundle &#39;fuenor/qfixgrep&#39;
NeoBundle &#39;fuenor/qfixhowm&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;qfixgrep もいれとくと何かといいみたい。&lt;/p&gt;

&lt;h3 id=&#34;設定:24b8e55833fae809ad1fe864f6f928a4&#34;&gt;設定&lt;/h3&gt;

&lt;p&gt;デフォルトだと拡張子 txt で作成されるため、 markdown
で記録するように 変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;&amp;quot; qfixhowm {{{
&amp;quot; ファイル拡張子をmdにする
let howm_filename = &#39;%Y/%m/%Y-%m-%d-%H%M%S.md&#39;
&amp;quot; ファイルタイプをmarkdownにする
let QFixHowm_FileType = &#39;markdown&#39;
&amp;quot; タイトル記号
let QFixHowm_Title = &#39;#&#39;
&amp;quot; タイトル行検索正規表現の辞書を初期化
let QFixMRU_Title = {}
&amp;quot; MRUでタイトル行とみなす正規表現(Vimの正規表現で指定)
let QFixMRU_Title[&#39;mkd&#39;] = &#39;^###[^#]&#39;
&amp;quot; grepでタイトル行とみなす正規表現(使用するgrepによっては変更する必要があります)
let QFixMRU_Title[&#39;mkd_regxp&#39;] = &#39;^###[^#]&#39;
&amp;quot; }}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんなんでいいっぽい。&lt;/p&gt;

&lt;p&gt;使い方、細かい設定は作者さんのページ参照&lt;/p&gt;

&lt;h5 id=&#34;参考:24b8e55833fae809ad1fe864f6f928a4&#34;&gt;参考:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/fudist/Home/qfixhowm&#34;&gt;QFixHowm - vim用howmプラグイン - fudist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vim-users.jp/2010/11/hack181/&#34;&gt;Vim-users.jp - Hack #181: Vimで使い捨てのファイルを作成する&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>