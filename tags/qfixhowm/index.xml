<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qfixhowm on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/qfixhowm/</link>
    <description>Recent content in Qfixhowm on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 29 Jun 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://yukimemi.github.io/tags/qfixhowm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>qfixhowm Vim でメモ</title>
      <link>http://yukimemi.github.io/post/2013-06-29-qfixhowm/</link>
      <pubDate>Sat, 29 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-06-29-qfixhowm/</guid>
      <description>

&lt;p&gt;vimでメモをとる場合、簡単な設定では vimrc に JunkFile
コマンドを定義するなどする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; JunkFile {{{
&amp;quot; http://vim-users.jp/2010/11/hack181/
  &amp;quot;&amp;quot; Open junk file.
  command! -nargs=0 JunkFile call s:open_junk_file()
  function! s:open_junk_file()
    let l:junk_dir = $HOME . &#39;/.vim_junk&#39;. strftime(&#39;/%Y/%m&#39;)
    if !isdirectory(l:junk_dir)
      call mkdir(l:junk_dir, &#39;p&#39;)
    endif

    let l:filename = input(&#39;Junk Code: &#39;, l:junk_dir.strftime(&#39;/%Y-%m-%d-%H%M%S.&#39;))
    if l:filename != &#39;&#39;
      execute &#39;edit &#39; . l:filename
    endif
  endfunction
  &amp;quot; }}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは実行時に拡張子が自由に設定出来るので、簡単にスクリプトを試してみたい場合
はとても便利。&lt;/p&gt;

&lt;p&gt;でも、やっぱり最近、メモは統合的に管理したいと思い、 QfixHowm
を導入することにした。&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;Neobundle で一発&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;NeoBundle &#39;fuenor/qfixgrep&#39;
NeoBundle &#39;fuenor/qfixhowm&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;qfixgrep もいれとくと何かといいみたい。&lt;/p&gt;

&lt;h3 id=&#34;設定&#34;&gt;設定&lt;/h3&gt;

&lt;p&gt;デフォルトだと拡張子 txt で作成されるため、 markdown
で記録するように 変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot;&amp;quot; qfixhowm {{{
&amp;quot; ファイル拡張子をmdにする
let howm_filename = &#39;%Y/%m/%Y-%m-%d-%H%M%S.md&#39;
&amp;quot; ファイルタイプをmarkdownにする
let QFixHowm_FileType = &#39;markdown&#39;
&amp;quot; タイトル記号
let QFixHowm_Title = &#39;#&#39;
&amp;quot; タイトル行検索正規表現の辞書を初期化
let QFixMRU_Title = {}
&amp;quot; MRUでタイトル行とみなす正規表現(Vimの正規表現で指定)
let QFixMRU_Title[&#39;mkd&#39;] = &#39;^###[^#]&#39;
&amp;quot; grepでタイトル行とみなす正規表現(使用するgrepによっては変更する必要があります)
let QFixMRU_Title[&#39;mkd_regxp&#39;] = &#39;^###[^#]&#39;
&amp;quot; }}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんなんでいいっぽい。&lt;/p&gt;

&lt;p&gt;使い方、細かい設定は作者さんのページ参照&lt;/p&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/fudist/Home/qfixhowm&#34;&gt;QFixHowm - vim用howmプラグイン - fudist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vim-users.jp/2010/11/hack181/&#34;&gt;Vim-users.jp - Hack #181: Vimで使い捨てのファイルを作成する&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>