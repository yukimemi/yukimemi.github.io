<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on YUKIMEMI</title>
    <link>http://yukimemi.github.io/tags/powershell/</link>
    <description>Recent content in Powershell on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 17 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://yukimemi.github.io/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShell Markdown を Wordに変換する</title>
      <link>http://yukimemi.github.io/post/2014-04-17-md2docx/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-04-17-md2docx/</guid>
      <description>仕事でwordを使うことが多々あるのだが、正直いってwordは使いづらい！ 勝手にレイアウトが変わったりスタイルが変わったり・・・思い通りにならないこと山のごとし。
なんとかならんもんか！とGoogle先生に聞いたところ、Markdownを使ってdocxを作成出来るものがあるじゃないですか。
Pandoc - About pandoc
ただ、pandocは基本htmlやlatex向きに作成されているのか、wordで思い通りのレイアウトには出来なかった。 特にスタイルとか・・・。
そこで、Markdownからdocxに変換するスクリプトを書いた。
yukimemi/md2docx
詳しくは README に記載してあるが、見出しやリストや画像や改ページ等には対応しています。
簡単に試すなら、上記リポジトリにある、 md2docx.cmd と sample.md をダウンロードし、コマンドプロンプトより、
&amp;gt; md2docx.cmd sample.md  と実行すれば、あら不思議。sample.docxが出来ているはずです。
Windows標準のPowerShellで書いてあるので、Windowsを使ってる人なら誰でもMarkdownからdocxに変換出来ます。
pandocだと、わざわざpandocをインストールしなくてはいけないので、これからプロジェクトの仕様書はMarkdownで書く！なんてことは出来ませんが、このPowerShellならそれも可能・・・なはず。
ぜひブラッシュアップして本当に使えるようにしたいので、プルリクお願いします＞＜</description>
    </item>
    
    <item>
      <title>vim で powershell を書く！</title>
      <link>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</guid>
      <description>この記事は、 Vim Advent Calendar 2013 70日目の記事になります。
vim で powershell を書く時の設定です。
まず、 syntax と indent 。 これは、以下のプラグインでOK。(なんかインデントは変だけど・・・)
NeoBundleLazy &#39;PProvost/vim-ps1&#39;  それから、 vim から実行するために、 quickrun を入れます。(これは定番ですね！)
NeoBundleLazy &#39;thinca/vim-quickrun&#39;  ちょっと前までは、powershell でquickrunするためには、設定が必要だったけど、最近オフィシャルに対応されるようになったみたいです。
参考: VimとPowerShell - Qiita
これで、powershellを書いてる時に、デフォルトだと &amp;lt;Leader&amp;gt;r で実行できます。
さらに、おもむろに以下のファイルを作成して、 header.cmd というファイル名で保存。
@echo off pushd &amp;quot;%~dp0&amp;quot; &amp;gt; nul set tm=%time: =0% set ps1file=%~n0___%date:~-10,4%%date:~-5,2%%date:~-2,2%_%tm:~0,2%%tm:~3,2%%tm:~6,2%%tm:~9,2%.ps1 for /f &amp;quot;usebackq skip=10 delims=&amp;quot; %%i in (&amp;quot;%~f0&amp;quot;) do @echo %%i &amp;gt;&amp;gt; &amp;quot;%ps1file%&amp;quot; powershell -NoProfile -ExecutionPolicy unrestricted -File &amp;quot;%ps1file%&amp;quot; %* del &amp;quot;%ps1file%&amp;quot; popd &amp;gt; nul pause exit /b %ERRORLEVEL% # ========== do ps1 file as a dosbatch ==========  そして、以下の設定を .</description>
    </item>
    
    <item>
      <title>powershell ForEach-Objectでcontinue</title>
      <link>http://yukimemi.github.io/post/2013-10-19-foreach_object_continue/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-10-19-foreach_object_continue/</guid>
      <description>powershell の ForEach-Object で、continue しようと したら、思ったように動かなかった話。
こんなコードを書いた。
gci -r | % { if ($_.Name -match &amp;quot;^tes.*&amp;quot;) { continue } $_ }  現在のディレクトリ配下を再帰的に見て、ファイル名が tes から始まるもの以外を 表示する・・・みたいな処理。 マッチした場合のみ、 continue して次の処理に行きたいのだが、この書き方だと、 break したのと同じような動きになってしまい、初回マッチしたら、それ以降の処理 はされない。
やりたいことを満たすには、以下のように書けばいいみたい。
gci -r | % { if ($_.Name -match &amp;quot;^tes.*&amp;quot;) { return } $_ }  continue の代わりに return を使う。
参考: powershell - Why does continue behave like break in a Foreach-Object? - Stack Overflow</description>
    </item>
    
    <item>
      <title>powershell MacからWindowsへsshしてpowershell</title>
      <link>http://yukimemi.github.io/post/2013-10-13-powershell_server/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-10-13-powershell_server/</guid>
      <description>普段家で触れるのはMacだけど、仕事で使うのはWindows。 Windows でCUI環境といえば、今はもうコマンドプロンプトでは なくて powershell らしい。 そこで、 powershell を覚えようと思った。
僕はかたちから入るタイプなので、まずは環境構築から。
理想としては、 powershell のスクリプトを書いたり実行する のは普段使っているMacから行いたい。 そこで、MacからWindowsへsshして、Macのターミナルから powershell を実行することにする。 調べたら、 powershell server という便利なものがあるらしい。
PowerShell Server | Secure Remote Access to PowerShell Over SSH
上記からダウンロードして、インストール。 特に何も設定は変えずにそのままインストールした。 あとは、「other」タブにある、エンコーディングを「UTF-8」に設定して、「Start」。 Macからsshで簡単に接続できた。 これで powershell の勉強をやっていこう。</description>
    </item>
    
    <item>
      <title>powershell vim plugin</title>
      <link>http://yukimemi.github.io/post/2013-10-13-powershell_vim_plugin/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-10-13-powershell_vim_plugin/</guid>
      <description>powershell script を vim で書くためのプラグイン
NeoBundleLazy &#39;PProvost/vim-ps1&#39;, { \ &#39;autoload&#39; : {&#39;filetypes&#39;: [&#39;ps1&#39;]} \ }  </description>
    </item>
    
  </channel>
</rss>