<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YUKIMEMI</title>
    <link>http://yukimemi.github.io/index.xml</link>
    <description>Recent content on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 10 Dec 2016 22:01:28 +0900</lastBuildDate>
    <atom:link href="http://yukimemi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use highlight.js with CDN</title>
      <link>http://yukimemi.github.io/post/2016-12-10_Use%20highlight.js%20with%20CDN/</link>
      <pubDate>Sat, 10 Dec 2016 22:01:28 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-12-10_Use%20highlight.js%20with%20CDN/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; を、 CDN で使用する方法。&lt;/p&gt;

&lt;p&gt;このブログを書くのに今までは &lt;a href=&#34;https://github.com/google/code-prettify&#34;&gt;google/code-prettify&lt;/a&gt; を使っていたんだけど、うまく hightlight されないのがあったりしたので、 &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; に乗り換えてみた。&lt;/p&gt;

&lt;p&gt;使い方は非常に簡単。&lt;/p&gt;

&lt;p&gt;ヘッダーに以下3行を追加するだけ。(スタイルは &lt;code&gt;onedark&lt;/code&gt; を使用)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/styles/atom-one-dark.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、これでは基本的な言語のハイライトしか設定出来ない。
&lt;code&gt;powershell&lt;/code&gt; とか、 &lt;code&gt;golang&lt;/code&gt; とかも対応したい場合、個別に追加する必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; のサイトで個別に言語を指定してダウンロードすることもできるが、全部ポチポチ指定してダウンロードするのは面倒だったので、直接 CDN から使いたかった。&lt;/p&gt;

&lt;p&gt;調べると、 &lt;a href=&#34;https://github.com/isagalaev/highlight.js&#34;&gt;isagalaev/highlight.js&lt;/a&gt; の README に書いてあった。
個別に使いたい言語を CDN から使うように指定すればいいみたい。&lt;/p&gt;

&lt;p&gt;ということで、以下のようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- hilight.js --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/styles/atom-one-dark.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/languages/vim.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/languages/dos.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/languages/go.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/languages/powershell.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/languages/haskell.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;べんり。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/tadnakam/items/99088d78512a20e75ff3&#34;&gt;コードのハイライト表示用 JS ライブラリ highlight.js の使い方&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://glatchdesign.com/blog/web/javascript/296&#34;&gt;軽量で多言語なコードハイライトhighlight.jsの使い方&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dein and vim singleton</title>
      <link>http://yukimemi.github.io/post/2016-12-09_dein%20and%20vim-singleton/</link>
      <pubDate>Fri, 09 Dec 2016 10:20:28 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-12-09_dein%20and%20vim-singleton/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://thinca.hatenablog.com/entry/20120201/1328099090&#34;&gt;vim-singleton&lt;/a&gt; という便利な vim plugin がある。&lt;/p&gt;

&lt;p&gt;vim の clientserver 機能を使って、ファイルをすでに起動している vim で開くことができる。&lt;/p&gt;

&lt;p&gt;これを &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein.vim&lt;/a&gt; と一緒に使用する時の方法がわからなかったので、 twitter でつぶやいてみた。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/yukimemi&#34;&gt;@yukimemi&lt;/a&gt; hook_source を使ってください。hook_add はロード前に呼ばれるのでエラーとなります&lt;/p&gt;&amp;mdash; 暗黒美夢王(deoplete dev) (@ShougoMatsu) &lt;a href=&#34;https://twitter.com/ShougoMatsu/status/805623471589892096&#34;&gt;2016年12月5日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;そしたらなんとあの Shougo さんからお返事が！！&lt;/p&gt;

&lt;p&gt;親切に教えてもらえました！&lt;/p&gt;

&lt;p&gt;そこで教えてもらった通り、 &lt;code&gt;hook_add&lt;/code&gt; から &lt;code&gt;hook_source&lt;/code&gt; に変更。&lt;/p&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dein.toml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[plugins]]
repo = &#39;thinca/vim-singleton&#39;
if = &amp;quot;!has(&#39;nvim&#39;)&amp;quot;
hook_source = &#39;&#39;&#39;
  call singleton#enable()
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、 lazy でないプラグインは、 &lt;code&gt;hook_source&lt;/code&gt; は動かないため、 &lt;code&gt;dein&lt;/code&gt; のドキュメントに書いてあるように &lt;code&gt;dein#call_hook(&#39;source&#39;)&lt;/code&gt; を手動で呼ぶ必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;init.vim&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set shellslash
if has(&#39;nvim&#39;)
  let $VIM_PATH = expand(&#39;~/.config/nvim&#39;)
  let $MYVIMRC = expand(&#39;~/.config/nvim/init.vim&#39;)
else
  let $VIM_PATH = expand(&#39;~/.vim&#39;)
  let $MYVIMRC = expand(&#39;~/.vimrc&#39;)
  let $MYGVIMRC = expand(&#39;~/.gvimrc&#39;)
endif

&amp;quot; Use dein.
if has(&#39;nvim&#39;)
  let s:cache_home = expand(&#39;~/.cache/nvim&#39;)
else
  let s:cache_home = expand(&#39;~/.cache/vim&#39;)
endif

let s:dein_dir = s:cache_home . &#39;/dein&#39;
let s:dein_repo_dir = s:dein_dir . &#39;/repos/github.com/Shougo/dein.vim&#39;
if !isdirectory(s:dein_repo_dir)
  execute &#39;!git clone https://github.com/Shougo/dein.vim &#39; . s:dein_repo_dir
endif
execute &#39;set runtimepath^=&#39; . fnamemodify(s:dein_repo_dir, &#39;:p&#39;)

let g:dein#install_max_processes = 16
let g:dein#install_progress_type = &#39;title&#39;
let g:dein#enable_notification = 1
let s:toml_file = $VIM_PATH . &#39;/dein.toml&#39;
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir, [$MYVIMRC, s:toml_file])
  call dein#load_toml(s:toml_file)
  call dein#end()
  call dein#save_state()
endif
call dein#call_hook(&#39;source&#39;)

&amp;quot; Check and install.
if has(&#39;vim_starting&#39;) &amp;amp;&amp;amp; dein#check_install()
  call dein#install()
endif

&amp;quot; After dein
filetype plugin indent on
syntax enable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分の設定はこんな感じ。
めちゃべんり。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://thinca.hatenablog.com/entry/20120201/1328099090&#34;&gt;singleton.vim 作った | 永遠に未完成&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim/blob/master/doc/dein.txt&#34;&gt;dein.vim doc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use fish instead of zsh</title>
      <link>http://yukimemi.github.io/post/2016-11-27_Use%20fish%20instead%20of%20zsh/</link>
      <pubDate>Sun, 27 Nov 2016 00:49:25 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-11-27_Use%20fish%20instead%20of%20zsh/</guid>
      <description>

&lt;p&gt;ちまたで(？)話題の &lt;code&gt;fish&lt;/code&gt; を使ってみた。&lt;/p&gt;

&lt;p&gt;長年使ってきた &lt;code&gt;zsh&lt;/code&gt; のかわりにはならないだろうなーと思いながら・・・。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;・・・が、いざ使ってみると非常に使いやすい！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zsh&lt;/code&gt; のかわりになるどころか置き換えてしまった。&lt;br /&gt;
(つまり、自分は結局そこまで &lt;code&gt;zsh&lt;/code&gt; を使いこなしていなかったんだろう・・・。)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fish&lt;/code&gt; のチュートリアルは、以下にある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://fishshell.com/docs/current/tutorial.html&#34;&gt;fish tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;日本語でもqiitaとかにいっぱい解説記事があるので難しいことはないと思う。
唯一はまったのは、上記tutorialにある、 &lt;code&gt;hybrid_bindings&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;vi っぽいキーバインドで、 insert モードの場合は emacs っぽくするって感じなんだろうけど、使用できなかった。
なんか issue 上がってたりしたので、そのうち修正されるのかもしれない。&lt;/p&gt;

&lt;p&gt;とりあえずは、必要なキーバインドのみを自分で再定義してやることで要望は満たせた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fish&lt;/code&gt; では、 &lt;a href=&#34;https://github.com/fisherman/fisherman&#34;&gt;fisherman&lt;/a&gt; というプラグインマネージャーが存在しており、これを使って各種プラグインを管理する。
日本語での解説も書いてあるので導入は簡単。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記を実行するだけ。&lt;/p&gt;

&lt;p&gt;自分が入れたパッケージはとりあえずこんだけ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;simple&lt;/code&gt; :
シンプルなテーマ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;omf/gi&lt;/code&gt; :
gitignore を管理できるやつ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2個だけ。 &lt;code&gt;fish&lt;/code&gt; が単体で色々出来るやつだからこそかも。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fish&lt;/code&gt; は、設定を &lt;code&gt;~/.config/fish&lt;/code&gt; 配下で管理する。
こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tree fish
fish
├── completions
├── conf.d
├── config.fish -&amp;gt; /Users/yukimemi/.dotfiles/.config/fish/config.fish
├── fishd.xxxxxxxxxxxx
├── fishfile -&amp;gt; /Users/yukimemi/.dotfiles/.config/fish/fishfile
├── functions
└── my_functions -&amp;gt; /Users/yukimemi/.dotfiles/.config/fish/my_functions
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tree my_functions
my_functions
├── __cdup.fish
├── __filter_command.fish
├── __filter_command_execute.fish
├── __filter_command_history_execute.fish
├── __filter_command_history_select.fish
├── __filter_command_select.fish
└── fish_user_key_bindings.fish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、上記 &lt;code&gt;fisherman&lt;/code&gt; を使っている場合、 &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 配下がどんどん侵されていくので、自分で作成した &lt;code&gt;function&lt;/code&gt; は &lt;code&gt;my_functions&lt;/code&gt; というディレクトリ配下で管理することにした。
(シンボリックリンクが嫌な場合、それを解決した &lt;a href=&#34;http://qiita.com/masa0x80/items/142bc668ea8e5084ce7c&#34;&gt;fresco&lt;/a&gt; というものもあるらしい。)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.fish&lt;/code&gt; から、 &lt;code&gt;my_functions&lt;/code&gt; の内容を読み込む。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Load my_functions.
for func in ~/.config/fish/my_functions/*.fish
  source $func
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;かんたん♪&lt;/p&gt;

&lt;p&gt;あとは、 &lt;code&gt;peco&lt;/code&gt; や &lt;code&gt;fzf&lt;/code&gt; などのフィルター系コマンドが使えるようにする。
zsh の時は、&lt;code&gt;fzf&lt;/code&gt; を使っていたんだけど、 &lt;code&gt;fzy&lt;/code&gt; ってのがあって、 &lt;code&gt;enhancd&lt;/code&gt; でおすすめって書いてあったから、とりあえずそれを使ってみる。&lt;/p&gt;

&lt;p&gt;まずは、コマンド定義。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/my_functions/__filter_command.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function __filter_command
  fzy -l 200
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fzy&lt;/code&gt; を使うよってだけ。 &lt;code&gt;-l&lt;/code&gt; オプションは表示する候補数。&lt;/p&gt;

&lt;p&gt;それから、これを使って、選択だけするやつと、実行するやつを定義。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/my_functions/__filter_command_select.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function __filter_command_select
  __filter_command | read -l line
  and commandline $line
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/my_functions/__filter_command_execute.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function __filter_command_execute
  __filter_command | read -l line
  and echo &amp;quot;
  ------
  Running command: $line
  ------&amp;quot;
  and eval $line
  commandline -f repaint
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度はこれで履歴検索するやつを作る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/my_functions/__filter_command_history_select.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function __filter_command_history_select
  history | sort -u | __filter_command_select
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/my_functions/__filter_command_history_execute.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function __filter_command_history_execute
  history | sort -u | __filter_command_execute
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。
簡単でわかりやすい。&lt;/p&gt;

&lt;p&gt;あとはこれをキーに割り当てる。
&lt;code&gt;fish&lt;/code&gt; では、キーバインドは &lt;code&gt;fish_user_key_bindings&lt;/code&gt; という関数で行うのが通例っぽい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/my_functions/fish_user_key_bindings.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;function fish_user_key_bindings

  bind -M insert \cf accept-autosuggestion
  bind -M insert \cn down-or-search
  bind -M insert \cp up-or-search
  # TODO: Not work.
  bind -M insert \c\^ __cdup

  # filter command.
  bind -M insert \cr __filter_command_history_select
  bind sul __filter_command_history_execute

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-M&lt;/code&gt; オプションでモードを指定できる。&lt;/p&gt;

&lt;p&gt;べんりー！
あとは、前使ってた &lt;code&gt;enhancd&lt;/code&gt; を使いたい。
それから、 &lt;code&gt;C-^&lt;/code&gt; で親ディレクトリに移動するってのを &lt;code&gt;zsh&lt;/code&gt; のときにやってたんだけど、それが &lt;code&gt;fish&lt;/code&gt; だとうまくできない。&lt;/p&gt;

&lt;p&gt;どうやってやればいいんだろ・・・。知ってる人いたら教えてください。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://fishshell.com/docs/current/index.html&#34;&gt;fish - Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/nutsinshell/items/5f111184b50f7081c92f&#34;&gt;初心者がShellを知りFish〜Fishermanを導入するまで&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/sotayamashita/items/61d49431053c44f01714&#34;&gt;fish-shell と fisherman の tips&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>js beautify with vim</title>
      <link>http://yukimemi.github.io/post/2016-10-09_js-beautify%20with%20vim/</link>
      <pubDate>Sun, 09 Oct 2016 11:23:19 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-10-09_js-beautify%20with%20vim/</guid>
      <description>

&lt;p&gt;vimでjavascriptを書くときの設定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dein.toml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# ==================== Filetype (javascript) ===== {{{1
[[plugins]]
repo = &#39;pangloss/vim-javascript&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;maxmellon/vim-jsx-pretty&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/javascript-libraries-syntax.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/es.next.syntax.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

# ==================== Utility =================== {{{1
[[plugins]]
repo = &#39;Chiel92/vim-autoformat&#39;
hook_add = &#39;&#39;&#39;
  let g:autoformat_autoindent = 0
  let g:autoformat_retab = 0
  let g:autoformat_remove_trailing_spaces = 0
  au MyAutoCmd BufWrite *.js,*.jsx :Autoformat
  nnoremap [Space]f :&amp;lt;C-u&amp;gt;Autoformat&amp;lt;CR&amp;gt;
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記設定で、かつ、 &lt;code&gt;js-beautify&lt;/code&gt; を別途インストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -g js-beautify
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;便利なのが、 &lt;code&gt;vim-autoformat&lt;/code&gt; プラグイン。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js-beautify&lt;/code&gt; をインストールして上記設定をしていると、javascriptを書いて保存したら自動でインデントを整えてくれる。&lt;br /&gt;
ただ、ES2015のimportやjsx表記などでインデントが変になってしまうので、&lt;code&gt;js-beautify&lt;/code&gt; 用の設定ファイルを作成する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.jsbeautifyrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;indent_size&amp;quot;: 2,
  &amp;quot;indent_char&amp;quot;: &amp;quot; &amp;quot;,
  &amp;quot;eol&amp;quot;: &amp;quot;\n&amp;quot;,
  &amp;quot;indent_level&amp;quot;: 0,
  &amp;quot;indent_with_tabs&amp;quot;: false,
  &amp;quot;preserve_newlines&amp;quot;: true,
  &amp;quot;max_preserve_newlines&amp;quot;: 10,
  &amp;quot;jslint_happy&amp;quot;: false,
  &amp;quot;space_after_anon_function&amp;quot;: false,
  &amp;quot;brace_style&amp;quot;: &amp;quot;collapse-preserve-inline&amp;quot;,
  &amp;quot;keep_array_indentation&amp;quot;: false,
  &amp;quot;keep_function_indentation&amp;quot;: false,
  &amp;quot;space_before_conditional&amp;quot;: true,
  &amp;quot;break_chained_methods&amp;quot;: false,
  &amp;quot;eval_code&amp;quot;: false,
  &amp;quot;unescape_strings&amp;quot;: false,
  &amp;quot;wrap_line_length&amp;quot;: 0,
  &amp;quot;wrap_attributes&amp;quot;: &amp;quot;auto&amp;quot;,
  &amp;quot;wrap_attributes_indent_size&amp;quot;: 4,
  &amp;quot;e4x&amp;quot;: true,
  &amp;quot;end_with_newline&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで快適なエディットができる。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/beautify-web/js-beautify/issues/382&#34;&gt;Newline inserted after ES6 module import/export · Issue #382 · beautify-web/js-beautify · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/MaxMEllon/vim-jsx-pretty&#34;&gt;GitHub - MaxMEllon/vim-jsx-pretty: [VimL] React JSX syntax pretty highlighting for vim.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zsh autosuggestions</title>
      <link>http://yukimemi.github.io/post/2016-09-25_zsh-autosuggestions/</link>
      <pubDate>Sun, 25 Sep 2016 23:53:12 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-25_zsh-autosuggestions/</guid>
      <description>&lt;p&gt;&lt;code&gt;zsh-autosuggestions&lt;/code&gt; という便利な &lt;em&gt;zsh&lt;/em&gt; のプラギンを見つけた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zplug&lt;/code&gt; を使って簡単にインストール可能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;zplug &amp;quot;zsh-users/zsh-autosuggestions&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは、表示された補完を決定するキーの設定を追加。
ちなみにデフォルトだと、右矢印が割り当てられてる模様。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;bindkey &#39;^ &#39; autosuggest-accept
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、 &lt;code&gt;Ctrl + Space&lt;/code&gt; で、補完候補が確定する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/zsh-autosuggestions.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;べんり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use solarized colorscheme in true color</title>
      <link>http://yukimemi.github.io/post/2016-09-19_Use%20solarized%20colorscheme%20in%20true%20color/</link>
      <pubDate>Mon, 19 Sep 2016 11:15:50 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-19_Use%20solarized%20colorscheme%20in%20true%20color/</guid>
      <description>

&lt;p&gt;前回の記事(&lt;a href=&#34;http://yukimemi.github.io/post/2016-09-19_True%20color%20in%20iTerm2%20Tmux%20Neovim/&#34;&gt;True color in iTerm2 Tmux Neovim | YUKIMEMI&lt;/a&gt;)で、 &lt;code&gt;iterm&lt;/code&gt; と &lt;code&gt;neovim&lt;/code&gt; でtrue colorを使う方法はわかったんだけど、なぜか、 &lt;code&gt;solarized&lt;/code&gt; の &lt;code&gt;colorscheme&lt;/code&gt; が有効にならなかった。&lt;/p&gt;

&lt;p&gt;通常の &lt;code&gt;solarized&lt;/code&gt; ではダメなようで、true color対応したやつを使えばいいみたい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[plugins]]
repo = &#39;lifepillar/vim-solarized8&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme solarized8_dark
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでできた。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/delphinus35/items/b8c1a8d3af9bbacb85b8&#34;&gt;tmux on iTerm2 で斜体 &amp;amp; True Color を使う - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>True color in iTerm2 Tmux Neovim</title>
      <link>http://yukimemi.github.io/post/2016-09-19_True%20color%20in%20iTerm2%20Tmux%20Neovim/</link>
      <pubDate>Mon, 19 Sep 2016 00:30:00 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-19_True%20color%20in%20iTerm2%20Tmux%20Neovim/</guid>
      <description>

&lt;p&gt;今時 &lt;code&gt;macbook&lt;/code&gt; のキレイな画面で256色なんて・・・&lt;/p&gt;

&lt;p&gt;っということで、 &lt;code&gt;True color&lt;/code&gt; が使えるそうなので設定してみた。&lt;/p&gt;

&lt;p&gt;まず、 &lt;code&gt;iTerm2&lt;/code&gt; の設定。&lt;/p&gt;

&lt;p&gt;は特になく、 &lt;code&gt;homebrew cask&lt;/code&gt; でインストールすればそのまま &lt;code&gt;true color&lt;/code&gt; が使えるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install iterm2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;tmux&lt;/code&gt; の設定。
&lt;code&gt;tmux&lt;/code&gt; はバージョン &lt;code&gt;2.2&lt;/code&gt; 以上ならOKっぽい。普通に &lt;code&gt;homebrew&lt;/code&gt; でインストールしたら &lt;code&gt;2.2&lt;/code&gt; だった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、設定ファイル &lt;code&gt;tmux.conf&lt;/code&gt; に以下を追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set -ga terminal-overrides &amp;quot;,xterm-256color:Tc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もし、以下の設定が書いてあったらコメントアウト。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# set -g default-terminal xterm-256color
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それから、 &lt;code&gt;neovim&lt;/code&gt; の設定 ( &lt;code&gt;init.vim&lt;/code&gt; )。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;if has(&#39;nvim&#39;)
  set termguicolors
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでOK。
昔の設定は、
&lt;code&gt;let $NVIM_TUI_ENABLE_TRUE_COLOR=1&lt;/code&gt;
とかだったらしいけど、2016/5/11から変わったっぽい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;terminal&lt;/code&gt; で &lt;code&gt;true color&lt;/code&gt; なのすごいべんり。
&lt;code&gt;iTerm2&lt;/code&gt; の &lt;code&gt;colorscheme&lt;/code&gt; に関係せずに &lt;code&gt;vim&lt;/code&gt; の &lt;code&gt;colorscheme&lt;/code&gt; を変えられる。&lt;/p&gt;

&lt;p&gt;設定方法を書いてくれた人たちに感謝。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/delphinus35/items/b8c1a8d3af9bbacb85b8&#34;&gt;tmux on iTerm2 で斜体 &amp;amp; True Color を使う - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sts10.github.io/blog/2015/10/24/true-hex-colors-with-neovim-and-iterm2/&#34;&gt;True HEX Colors with Neovim and iTerm2 - Prevent Default&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>flowtype in vim</title>
      <link>http://yukimemi.github.io/post/2016-09-18_flowtype%20in%20vim/</link>
      <pubDate>Sun, 18 Sep 2016 13:03:18 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-18_flowtype%20in%20vim/</guid>
      <description>

&lt;p&gt;最近 &lt;code&gt;flowtype&lt;/code&gt; という &lt;code&gt;Altjs&lt;/code&gt; があるのを知った。&lt;/p&gt;

&lt;p&gt;facebookが作っているらしく、 &lt;code&gt;typescript&lt;/code&gt; と違って、既存のjavascriptをそのまま使うことも出来、型エラーがあってもコンパイル、実行が出来る。&lt;/p&gt;

&lt;p&gt;導入は &lt;code&gt;npm&lt;/code&gt; で簡単にインストール出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -g flow-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;flowtype&lt;/code&gt; 自体の説明は
&lt;a href=&#34;http://qiita.com/mizchi/items/95ee0101ac22e4b7b662&#34;&gt;型なき世界のためのflowtype入門 - Qiita&lt;/a&gt;
とか、公式の
&lt;a href=&#34;https://flowtype.org/&#34;&gt;Flow | A static type checker for JavaScript&lt;/a&gt;
とか見ればいいと思う。&lt;/p&gt;

&lt;p&gt;んで、公式にも書いてあるように、vimやemacsのプラギンが提供されている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/flowtype/vim-flow&#34;&gt;flowtype/vim-flow: A vim plugin for Flow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;neovim&lt;/code&gt; &lt;code&gt;dein&lt;/code&gt; でのインストール手順。
&lt;code&gt;toml&lt;/code&gt; を使っている前提。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;[[plugins]]
repo = &#39;flowtype/vim-flow&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]
build = &#39;npm install -g flow-bin&#39;
hook_add = &#39;&#39;&#39;
  let g:flow#autoclose = 1
&#39;&#39;&#39;

[[plugins]]
repo = &#39;Shougo/deoplete.nvim&#39;
if = &amp;quot;has(&#39;nvim&#39;)&amp;quot;
on_i = 1
hook_add = &#39;&#39;&#39;
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#omni_patterns = {}
  let g:deoplete#omni_patterns.javascript = &#39;[^. *\t]\.\w*&#39;
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、 &lt;code&gt;deoplete&lt;/code&gt; を使って自動補完が出来、 &lt;code&gt;flowtype&lt;/code&gt; が記述出来た。&lt;/p&gt;

&lt;p&gt;ちなみに、 &lt;code&gt;javascript&lt;/code&gt; の &lt;code&gt;syntax&lt;/code&gt; とかは、以下の設定がいいもよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;[[plugins]]
repo = &#39;pangloss/vim-javascript&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;mxw/vim-jsx&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/yajs.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;maxmellon/vim-jsx-pretty&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/javascript-libraries-syntax.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]

[[plugins]]
repo = &#39;othree/es.next.syntax.vim&#39;
on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/flowtype/vim-flow&#34;&gt;flowtype/vim-flow: A vim plugin for Flow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/maxmellon/items/0e6173cdd51843053839&#34;&gt;vimのECMASCript2015環境をイイ感じにする - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Type sound with Tickeys</title>
      <link>http://yukimemi.github.io/post/2016-09-03_Type%20sound%20with%20Tickeys/</link>
      <pubDate>Sat, 03 Sep 2016 10:56:35 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-03_Type%20sound%20with%20Tickeys/</guid>
      <description>

&lt;p&gt;最近、
&lt;a href=&#34;http://rubikitch.com/2016/08/17/sound-wav/&#34;&gt;Emacsで効果音(SE)を付けて作業効率を3倍にする方法&lt;/a&gt;
という記事を見つけた。&lt;/p&gt;

&lt;p&gt;やっぱ音があった方がやる気が出るし、コードもすらすら書けるのではないか？
僕は形から入るタイプなのである・・・。&lt;/p&gt;

&lt;p&gt;そこで、Emacsと限らず他のものでもすべて音が出るようなソフトはないかと探してみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yingDev/Tickeys&#34;&gt;yingDev/Tickeys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Rust&lt;/code&gt; で書かれてるらしい。&lt;/p&gt;

&lt;p&gt;インストール方法は homebrew cask で一発。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install tickeys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはシステム環境設定のアクセシビリティから許可するだけ。&lt;/p&gt;

&lt;p&gt;起動したら &lt;code&gt;QAZ123&lt;/code&gt; とタイプすることで設定画面が開く。&lt;/p&gt;

&lt;p&gt;音を選択出来るので、 &lt;code&gt;Cherry G80-3000&lt;/code&gt; ってやつにした。
良い音！たくさんタイプしたくなるので、コード書くのが捗ること間違いなし。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.softantenna.com/wp/mac/tickeys/&#34;&gt;Tickeys – メカニカルキーボードのタイプ音を堪能できるMacアプリ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapping with &lt;nowait&gt; option in vim</title>
      <link>http://yukimemi.github.io/post/2016-08-09_Mapping%20with%20%3Cnowait%3E%20option%20in%20vim/</link>
      <pubDate>Tue, 09 Aug 2016 09:58:11 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-08-09_Mapping%20with%20%3Cnowait%3E%20option%20in%20vim/</guid>
      <description>&lt;p&gt;&lt;code&gt;vim&lt;/code&gt; でマッピングをする時に、便利なオプションがあることを最近知った。&lt;/p&gt;

&lt;p&gt;それが &lt;code&gt;&amp;lt;nowait&amp;gt;&lt;/code&gt; オプション。&lt;/p&gt;

&lt;p&gt;例えば、よくやるキーマップの例としてこんなのがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エスケープ2回でハイライト消すっていうマッピング。&lt;/p&gt;

&lt;p&gt;だけど、これを設定した状態で、コマンドウィンドウを &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; で閉じたい場合、&lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; を押下しても、次のマッピングを待っている状態になってしまって、すぐに閉じることができない。&lt;/p&gt;

&lt;p&gt;こんなマッピングをした場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合に、 &lt;code&gt;&amp;lt;nowait&amp;gt;&lt;/code&gt; というオプションを追加することで、 &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; を押下したらすぐにコマンドウィンドウを閉じることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;めちゃめちゃ便利。&lt;/p&gt;

&lt;p&gt;僕の場合、コマンドウィンドウと、Uniteを閉じるのにこのオプションを使っている。&lt;/p&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Cmdwin.
nnoremap : q:i
vnoremap : q:A

&amp;quot; nohlsearch.
nnoremap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;

&amp;quot; Escape cmd win.
au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;

&amp;quot; Escape unite.
au MyAutoCmd FileType unite nmap &amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;Esc&amp;gt; &amp;lt;Plug&amp;gt;(unite_exit)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JScript by ES2015 with webpack x gulp x babel</title>
      <link>http://yukimemi.github.io/post/2016-07-26_JScript%20by%20ES2015%20with%20webpack%20x%20gulp%20x%20babel/</link>
      <pubDate>Tue, 26 Jul 2016 00:58:51 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-07-26_JScript%20by%20ES2015%20with%20webpack%20x%20gulp%20x%20babel/</guid>
      <description>

&lt;p&gt;JScriptをES2015で書こう！！&lt;/p&gt;

&lt;p&gt;・・・今更なJScriptだけれども、まだまだWindowsでは使えるはず。
いや、仕方なく仕事では使わなきゃいけない場面が多々ある。&lt;/p&gt;

&lt;p&gt;最近はpowershellをよく使っていたけれども、書いてて楽しいのはやっぱりjavascriptの方が上。
でもどうせ書くなら、ES2015で書きたい！！&lt;/p&gt;

&lt;p&gt;そこで、babelやらwebpackやらgulpやらを駆使してやってみた。&lt;/p&gt;

&lt;p&gt;ディレクトリ構成はこんなの。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tree -I node_modules
.
├── src
│   ├── foo.js
│   └── bar.js
├── dst
│   ├── foo.cmd
│   └── bar.cmd
├── .babelrc
├── package.json
├── gulpfile.babel.js
└── webpack.config.babel.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろインストール。(こんだけやったか定かじゃないけど・・・&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -D babel babel-loader babel-preset-es2015-loose es3ify-webpack-plugin gulp gulp-cli gulp-convert-encoding gulp-eol gulp-header gulp-plumber gulp-rename gulp-watch webpack webpack-stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; はこんな感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;jscript&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;gulpfile.babel.js&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {},
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;babel-core&amp;quot;: &amp;quot;^6.9.1&amp;quot;,
    &amp;quot;babel-loader&amp;quot;: &amp;quot;^6.2.4&amp;quot;,
    &amp;quot;babel-plugin-transform-es2015-ie8-classes&amp;quot;: &amp;quot;^0.1.8&amp;quot;,
    &amp;quot;babel-polyfill&amp;quot;: &amp;quot;^6.9.1&amp;quot;,
    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.9.0&amp;quot;,
    &amp;quot;babel-preset-es2015-loose&amp;quot;: &amp;quot;^7.0.0&amp;quot;,
    &amp;quot;babel-preset-es2015-loose-ie8&amp;quot;: &amp;quot;0.0.4&amp;quot;,
    &amp;quot;es3ify-webpack-plugin&amp;quot;: &amp;quot;0.0.0&amp;quot;,
    &amp;quot;es5-shim&amp;quot;: &amp;quot;^4.5.8&amp;quot;,
    &amp;quot;gulp&amp;quot;: &amp;quot;^3.9.1&amp;quot;,
    &amp;quot;gulp-cli&amp;quot;: &amp;quot;^1.2.2&amp;quot;,
    &amp;quot;gulp-convert-encoding&amp;quot;: &amp;quot;^1.0.0&amp;quot;,
    &amp;quot;gulp-eol&amp;quot;: &amp;quot;^0.1.2&amp;quot;,
    &amp;quot;gulp-header&amp;quot;: &amp;quot;^1.8.7&amp;quot;,
    &amp;quot;gulp-plumber&amp;quot;: &amp;quot;^1.1.0&amp;quot;,
    &amp;quot;gulp-rename&amp;quot;: &amp;quot;^1.2.2&amp;quot;,
    &amp;quot;gulp-replace&amp;quot;: &amp;quot;^0.5.4&amp;quot;,
    &amp;quot;gulp-watch&amp;quot;: &amp;quot;^4.3.9&amp;quot;,
    &amp;quot;imports-loader&amp;quot;: &amp;quot;^0.6.5&amp;quot;,
    &amp;quot;json3&amp;quot;: &amp;quot;^3.3.2&amp;quot;,
    &amp;quot;lodash&amp;quot;: &amp;quot;^3.10.1&amp;quot;,
    &amp;quot;moment&amp;quot;: &amp;quot;^2.14.1&amp;quot;,
    &amp;quot;webpack&amp;quot;: &amp;quot;^1.13.1&amp;quot;,
    &amp;quot;webpack-stream&amp;quot;: &amp;quot;^3.2.0&amp;quot;
  },
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;gulp&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;gulp watch&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いらないのあるかもしれない。
ポイントとしては、 &lt;code&gt;lodash&lt;/code&gt; を使いたい場合、Version 4.0 以降はie8以下に対応してないので、(つまりJScriptも不可) あえてVersionをダウンさせる。&lt;/p&gt;

&lt;p&gt;次に &lt;code&gt;webpack&lt;/code&gt; の設定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webpack.config.babel.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import path from &#39;path&#39;;
import encodingPlugin from &#39;webpack-encoding-plugin&#39;;
import es3ifyPlugin from &#39;es3ify-webpack-plugin&#39;;
import webpack from &#39;webpack&#39;;

const src = path.join(__dirname, &#39;src&#39;);

export default {
  entry: {
    foo: path.join(src, &#39;foo.js&#39;),
    bar: path.join(src, &#39;bar.js&#39;)
  },
  output: {
    path: path.join(__dirname, &#39;dst&#39;),
    filename: &#39;[name].js&#39;
  },

  module: {
    loaders: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: &#39;babel-loader&#39;
      }
    ]
  },
  resolve: {
    extensions: [&#39;&#39;, &#39;.js&#39;]
  },
  plugins: [
    new es3ifyPlugin(),
    new webpack.ContextReplacementPlugin(/moment[\\\/]locale$/, /^\.\/(en|ja)$/),
  ]

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スクリプトってのはその場でちょーっと書くものだから、一つじゃなくてentry pointは複数にしてる。
ポイント？としては、 &lt;code&gt;es3ify-webpack-plugin&lt;/code&gt; で、es3へダウンコンパイル？させてることと、 &lt;code&gt;moment.js&lt;/code&gt; を使う場合、そのままではwebpackが全ロケールを読みこんじゃうんで、一部だけ読み込むようにしてるところ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt; でばべる時の設定で、JScriptとして使えるようにするために(IE8以下対応) &lt;code&gt;.babelrc&lt;/code&gt; の設定をする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;presets&amp;quot;: [
    &amp;quot;es2015-loose&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで、これが &lt;code&gt;gulp&lt;/code&gt; の設定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gulpfile.babel.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import gulp from &#39;gulp&#39;;
import encoding from &#39;gulp-convert-encoding&#39;;
import eol from &#39;gulp-eol&#39;;
import plumber from &#39;gulp-plumber&#39;;
import watch from &#39;gulp-watch&#39;;
import rename from &#39;gulp-rename&#39;;
import header from &#39;gulp-header&#39;;
import webpack from &#39;webpack-stream&#39;;

import config from &#39;./webpack.config.babel.js&#39;;

const Header = &amp;quot;@set @junk=1 /*\r\n@cscript //nologo //e:jscript \&amp;quot;%~f0\&amp;quot; %*\r\n@exit /b %errorlevel%\r\n\r\n*/&amp;quot;;

gulp.task(&#39;build&#39;, () =&amp;gt; {
  gulp.src(&#39;src&#39;)
    .pipe(plumber())
    .pipe(webpack(config))
    .pipe(eol(&amp;quot;\r\n&amp;quot;))
    .pipe(encoding({to: &amp;quot;Shift_JIS&amp;quot;}))
    .pipe(rename({extname: &amp;quot;.cmd&amp;quot;}))
    .pipe(header(Header))
    .pipe(gulp.dest(&#39;dst&#39;));
});

gulp.task(&#39;watch&#39;, [&#39;build&#39;], () =&amp;gt; {
  watch([&amp;quot;./src/**&amp;quot;], (evt) =&amp;gt; {
    gulp.start(&#39;default&#39;);
  });
});

gulp.task(&#39;default&#39;, [&#39;build&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;webpack実行&lt;/li&gt;
&lt;li&gt;改行コードを &lt;code&gt;CRLF&lt;/code&gt; へ変更&lt;/li&gt;
&lt;li&gt;文字コードを &lt;code&gt;Shift_JIS&lt;/code&gt; へ変換&lt;/li&gt;
&lt;li&gt;拡張子を &lt;code&gt;.cmd&lt;/code&gt; へ変更&lt;/li&gt;
&lt;li&gt;ヘッダーを付与 (バッチファイルとして実行させるため)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ってことをしてる。&lt;/p&gt;

&lt;p&gt;実行するときは、 &lt;code&gt;npm script&lt;/code&gt; で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;watch タスクは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで快適にJScriptがかける！！&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/25384360/how-to-prevent-moment-js-from-loading-locales-with-webpack&#34;&gt;javascript - How to prevent moment.js from loading locales with webpack? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/BryceHQ/es3ify-webpack-plugin&#34;&gt;BryceHQ/es3ify-webpack-plugin: A simple webpack plugin to es3ify your code for old versions of ie, such as ie8.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Super saiya Vim !</title>
      <link>http://yukimemi.github.io/post/2015-09-23_Super%20saiya%20Vim%20%21/</link>
      <pubDate>Wed, 23 Sep 2015 14:54:51 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-09-23_Super%20saiya%20Vim%20%21/</guid>
      <description>

&lt;p&gt;Vimでも超サイヤ人になりたい！&lt;/p&gt;

&lt;p&gt;ってなわけでやってみた。&lt;/p&gt;

&lt;p&gt;経緯としては、Windows環境でvimの起動がかなり遅かったため。&lt;/p&gt;

&lt;p&gt;vimに導入したプラグイン数が多くなりすぎていたため、起動に時間がかかっていた。
そこで、起動時には基本的なプラグインのみ読み込み、後から必要に応じてpluginを追加で読み込むようにしてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;if has(&#39;vim_starting&#39;)
  if &amp;amp;compatible
    set nocompatible
  endif
  set runtimepath+=~/.cache/neobundle/neobundle.vim
endif

call neobundle#begin(expand(&#39;~/.cache/neobundle&#39;))

if neobundle#load_cache()

  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle_base.toml&#39;)
  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy_base.toml&#39;, {&#39;lazy&#39; : 1})

  NeoBundleSaveCache
endif

call neobundle#end()

filetype plugin indent on

nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;s :&amp;lt;C-u&amp;gt;call &amp;lt;SID&amp;gt;loadAllPlugins()&amp;lt;CR&amp;gt;
function! s:loadAllPlugins()
  call neobundle#append()

  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle.toml&#39;)
  call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy.toml&#39;, {&#39;lazy&#39; : 1})

  call neobundle#end()
  filetype plugin indent on
  source ~/.vim/vim.d/05_pluginsetting.vim
  echom &amp;quot;Suuuuuuuuuper !!!!!!!&amp;quot;
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、起動時は最小限のpluginで爆速起動し、必要な時に &lt;code&gt;&amp;lt;Space&amp;gt;s&lt;/code&gt; を押下することで超サイヤVimになれる。(全pluginをロードする)&lt;/p&gt;

&lt;p&gt;遅かったWindows環境ではまだ試せていないが、New MacBook 12では、0.2sくらいの起動時間が0.15sにまで短縮された・・・！&lt;/p&gt;

&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.hifumi.info/2015/03/29/neobundle-load-toml/&#34;&gt;NeoBundleのプラグイン管理をTOMLに任せてvimrcをスッキリさせる | blog: takahiro okumura&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Shougo/3d2adcb83e9eb0e8d4af&#34;&gt;neobundle の toml 記法サンプル&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up Macbook in Ansible</title>
      <link>http://yukimemi.github.io/post/2015-07-26_Set%20up%20Macbook%20in%20Ansible/</link>
      <pubDate>Sun, 26 Jul 2015 16:08:23 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-07-26_Set%20up%20Macbook%20in%20Ansible/</guid>
      <description>

&lt;p&gt;せっかくMacbookを新調したので、セットアップを今までのオレオレスクリプトから、ansibleに移行した。&lt;/p&gt;

&lt;p&gt;先人の参考になりまくる記事がいっぱいあるので、けっこう簡単に出来た。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yukimemi/ansible-playbook&#34;&gt;yukimemi/ansible-playbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考記事だと、ansible-galaxyで、事前にhomebrewパッケージをインストールしなきゃいけない
みたいに書いてあるけど、実際は不要だった。&lt;/p&gt;

&lt;p&gt;べんりだansible。
Mac以外にも対応出来るように今後は拡張していきたい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/oAjTzf&#34;&gt;AnsibleでHomebrew, Cask, Atomエディターのパッケージを管理する - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/SrOGry&#34;&gt;MacだってAnsibleで構成管理したい！ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://goo.gl/xczLlf&#34;&gt;Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New MacBook 12</title>
      <link>http://yukimemi.github.io/post/2015-07-26_New%20MacBook%2012/</link>
      <pubDate>Sun, 26 Jul 2015 15:17:39 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-07-26_New%20MacBook%2012/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://yukimemi.github.io/img/NewMacbook12.png&#34; alt=&#34;NewMacBook12&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ついに・・・ついに買ってしまった。New MacBook 12インチ。&lt;/p&gt;

&lt;p&gt;今まで使ってたMacbook Air Late 2010のキーボードが急に反応しなくなってしまったため、
急遽New Macbook 12インチを新調した。&lt;/p&gt;

&lt;p&gt;なんにもカスタマイズせずに一番安いのをヤマダ電機で購入した。&lt;/p&gt;

&lt;p&gt;ヤマダのポイントが10パーついて、14000もポイントがある。
何に使おうか・・・。&lt;/p&gt;

&lt;p&gt;肝心のMacbookの使い勝手は、もう文句なしに素晴らしい。
心配してた熱も特になし。&lt;/p&gt;

&lt;p&gt;驚いたのが、こんなに薄いのに、思った以上に良い音が出るということ。&lt;/p&gt;

&lt;p&gt;性能も十分だしすばらしい。ほんとAppleはすごい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PalmDetect in Ubuntu</title>
      <link>http://yukimemi.github.io/post/2015-05-10_PalmDetect%20in%20Ubuntu/</link>
      <pubDate>Sun, 10 May 2015 08:57:44 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-10_PalmDetect%20in%20Ubuntu/</guid>
      <description>

&lt;p&gt;MacBook AirにUbuntu 15.04をインストールした。
だいたい使いやすくはなっているのだけど、たまにキーボード入力をしている時にタッチパッドが誤反応してしまう時があった。&lt;/p&gt;

&lt;p&gt;そこで、手のひら検出？とかいうのを入れてみることにした。&lt;/p&gt;

&lt;p&gt;以下のファイルを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim ~/.config/autostart/synclient.desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容は以下の通り&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[Desktop Entry]
Type=Application
Exec=synclient PalmDetect=1
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[ja]=synclient(PalmDetect)
Name=synclient(PalmDetect)
Comment[ja]=
Comment=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Superキーを押して出てくる検索メニューから「自動起動するアプリケーション」を選択して、そこで記載するのと同じ。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;参考&#34;&gt;参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kaz8/items/51a43a7290c29919bc2e&#34;&gt;安全にsynclientでUbuntuのタッチパッド設定を変更する - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>