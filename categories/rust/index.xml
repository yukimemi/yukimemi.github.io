<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on YUKIMEMI</title>
    <link>http://yukimemi.github.io/categories/rust/</link>
    <description>Recent content in Rust on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 07 Jan 2018 16:59:47 +0900</lastBuildDate>
    
	<atom:link href="http://yukimemi.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fix Broken Pipe in Rust</title>
      <link>http://yukimemi.github.io/post/2018-01-07_fix-broken-pipe-in-rust/</link>
      <pubDate>Sun, 07 Jan 2018 16:59:47 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2018-01-07_fix-broken-pipe-in-rust/</guid>
      <description>以前の記事 で、 rust で変更のある git リポジトリを再帰的に検索する、というのを書いたのだけど、一部バグがあったので、修正した。
gsr では、 --all というオプションを指定することで、指定配下 (デフォルトは $(ghq root) ) の git リポジトリを全て列挙する。 それに、パイプで fzf や、 peco を通すことで、選択して移動、というのをやっていた。
fish で書くとこんな感じ。
function __cd_to_git_dir gsr --all | peco | read -l line and echo &amp;quot;Change directory $line&amp;quot; and cd $line end  だけど、 gsr が全ての結果を出力する前に、選択を決定して移動してしまった場合、以下のエラーが出力された。
thread &#39;main&#39; panicked at &#39;failed printing to stdout: Broken pipe (os error 32)&#39;  どうやら、 println! で標準出力に出力している場合で、パイプ出力が中断されるとダメみたい。
簡単のために、以下の rust プログラムで実験。
fn main() { (0.</description>
    </item>
    
    <item>
      <title>gsr in Rust</title>
      <link>http://yukimemi.github.io/post/2017-11-12_gsr-in-rust/</link>
      <pubDate>Sun, 12 Nov 2017 10:27:29 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-11-12_gsr-in-rust/</guid>
      <description>以前の 投稿 で、git status を再帰的に全Gitディレクトリで実行して、変更のあるリポジトリを簡単に見つける というのを golang で書いていたのだが、それを rust で書き直してみた。
yukimemi/gsr-rs
インストールは、 cargo で実施。
$ cargo install --git https://github.com/yukimemi/gsr-rs $ gsr -h gsr 0.2.2 USAGE: gsr [FLAGS] [input] FLAGS: --ahead Print ahead repo -a, --all Print all git directory --behind Print behind repo -f, --fetch Execute git fetch before check -h, --help Prints help information -V, --version Prints version information ARGS: &amp;lt;input&amp;gt; Input directory. default is $(ghq root) or &#39;.</description>
    </item>
    
  </channel>
</rss>