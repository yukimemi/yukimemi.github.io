<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on YUKIMEMI</title>
    <link>http://yukimemi.github.io/categories/vim/</link>
    <description>Recent content in Vim on YUKIMEMI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 01 Oct 2017 18:21:37 +0900</lastBuildDate>
    
	<atom:link href="http://yukimemi.github.io/categories/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fix conf with single user mode on mac</title>
      <link>http://yukimemi.github.io/post/2017-10-01_fix-conf-with-single-user-mode-on-mac/</link>
      <pubDate>Sun, 01 Oct 2017 18:21:37 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-10-01_fix-conf-with-single-user-mode-on-mac/</guid>
      <description>mac でシングルユーザーモードの起動と、設定ファイルの修正方法。
nas の自動マウントを行おうとして、 automount の設定を変更していたら、再起動後、 mac が起動しなくなった。
その修正方法。
Mac をシングルユーザモードまたは Verbose モードで起動する
ここを見ればわかるが、mac起動時に、 Command + S を押しっぱなしでシングルユーザーモードに入れる。
んで、あとは、 vi で設定をもとに戻して終了・・・っと思いきや、設定を書き込み出来なかった。
デフォルトだと、 / が読み込み専用でマウントされている。 書き込み可能で再マウントする。 (High Sierra だったので、APFS)
# mount_apfs -uw /  これで書き込みできる。 設定は、 man で確認できる。
# man 8 mount  修正後、再起動して完了。
# reboot  参考 Mac をシングルユーザモードまたは Verbose モードで起動する</description>
    </item>
    
    <item>
      <title>Use minpac.vim</title>
      <link>http://yukimemi.github.io/post/2017-09-17_use-minpac.vim/</link>
      <pubDate>Sun, 17 Sep 2017 23:30:20 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-09-17_use-minpac.vim/</guid>
      <description>vim や neovim で標準で用意されている package 機能。まだ一度も触ったことがなかったので使ってみた。
使ってみるに当たって、 k-takata/minpac が 便利そうなので、利用してみた。
&amp;quot; Plugin: &amp;quot; Use minpac. {{{1 set packpath^=&#39;~/.cache/nvim/&#39; let s:minpac_dir = &#39;~/.cache/nvim/pack/minpac/opt/minpac&#39; if has(&#39;vim_starting&#39;) if !isdirectory(s:minpac_dir) echo &amp;quot;Install minpac ...&amp;quot; execute &#39;!git clone --depth 1 https://github.com/k-takata/minpac &#39; . s:minpac_dir endif endif &amp;quot; pack list. {{{1 &amp;quot; start plugins. {{{2 let s:start_plugs = [ \ [&#39;Yggdroot/indentLine&#39;, {}], \ [&#39;itchyny/lightline.vim&#39;, {}], \ ] &amp;quot; opt plugins. {{{2 let s:opt_plugs = [ \ [&#39;fatih/vim-go&#39;, {&#39;type&#39;: &#39;opt&#39;}], \ [&#39;zchee/deoplete-go&#39;, {&#39;type&#39;: &#39;opt&#39;, &#39;do&#39;: &#39;silent!</description>
    </item>
    
    <item>
      <title>Setting of the vim-plug</title>
      <link>http://yukimemi.github.io/post/2017-06-08_vim-plug/</link>
      <pubDate>Thu, 08 Jun 2017 07:43:37 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-06-08_vim-plug/</guid>
      <description>ずっと dein.vim を使っていたのだけれど、ちょっと他のも試しに使ってみるかと思って、こっちも人気のある、 vim-plug を試しに使ってみた。
設定は公式のREADMEとかを参考にして、こんな感じになった。 (全部じゃないけど、抜粋して)
&amp;quot; Plugin: {{{1 &amp;quot; Use vim-plug. let s:cache_home = expand(&#39;~/.cache/nvim&#39;) let s:plug_dir = s:cache_home . &#39;/plugs&#39; let s:vim_plug_dir = s:cache_home . &#39;/vim-plug&#39; if has(&#39;vim_starting&#39;) if !isdirectory(s:vim_plug_dir) echo &amp;quot;Install vim-plug ...&amp;quot; execute &#39;!git clone --depth 1 https://github.com/junegunn/vim-plug.git &#39; . s:vim_plug_dir . &#39;/autoload&#39; endif execute &#39;set runtimepath^=&#39; . fnamemodify(s:vim_plug_dir, &#39;:p&#39;) endif &amp;quot; Helper function. function! Cond(cond, ...) let opts = get(a:000, 0, {}) return a:cond ?</description>
    </item>
    
    <item>
      <title>Use denite instead of unite</title>
      <link>http://yukimemi.github.io/post/2017-05-24_use-denite/</link>
      <pubDate>Wed, 24 May 2017 18:15:16 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2017-05-24_use-denite/</guid>
      <description>やろうやろうと思っていた、 Denite をついに使ってみた。
dein を使って toml で設定。
# ==================== Denite ==================== {{{1 [[plugins]] repo = &#39;Shougo/denite.nvim&#39; on_cmd = &#39;Denite&#39; if = &amp;quot;has(&#39;python3&#39;)&amp;quot; hook_add = &#39;&#39;&#39; &amp;quot; Use plefix s nnoremap suc :&amp;lt;C-u&amp;gt;Denite colorscheme -auto-preview&amp;lt;CR&amp;gt; nnoremap sub :&amp;lt;C-u&amp;gt;Denite buffer&amp;lt;CR&amp;gt; nnoremap suf :&amp;lt;C-u&amp;gt;Denite file&amp;lt;CR&amp;gt; nnoremap suF :&amp;lt;C-u&amp;gt;Denite file_rec&amp;lt;CR&amp;gt; nnoremap suu :&amp;lt;C-u&amp;gt;Denite buffer file_old&amp;lt;CR&amp;gt; nnoremap suo :&amp;lt;C-u&amp;gt;Denite outline -no-quit -mode=normal&amp;lt;CR&amp;gt; nnoremap suh :&amp;lt;C-u&amp;gt;Denite help&amp;lt;CR&amp;gt; nnoremap sur :&amp;lt;C-u&amp;gt;Denite register&amp;lt;CR&amp;gt; nnoremap sug :&amp;lt;C-u&amp;gt;Denite grep -no-empty&amp;lt;CR&amp;gt; nnoremap su/ :&amp;lt;C-u&amp;gt;Denite line&amp;lt;CR&amp;gt; nnoremap suR :&amp;lt;C-u&amp;gt;Denite -resume&amp;lt;CR&amp;gt; noremap sul :&amp;lt;C-u&amp;gt;Denite command_history&amp;lt;CR&amp;gt; &#39;&#39;&#39; hook_post_source = &#39;&#39;&#39; &amp;quot; Default options.</description>
    </item>
    
    <item>
      <title>dein and vim singleton</title>
      <link>http://yukimemi.github.io/post/2016-12-09_dein-and-vim-singleton/</link>
      <pubDate>Fri, 09 Dec 2016 10:20:28 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-12-09_dein-and-vim-singleton/</guid>
      <description>vim-singleton という便利な vim plugin がある。
vim の clientserver 機能を使って、ファイルをすでに起動している vim で開くことができる。
これを dein.vim と一緒に使用する時の方法がわからなかったので、 twitter でつぶやいてみた。
@yukimemi hook_source を使ってください。hook_add はロード前に呼ばれるのでエラーとなります
&amp;mdash; 暗黒美夢王(deoplete dev) (@ShougoMatsu) 2016年12月5日 
そしたらなんとあの Shougo さんからお返事が！！
親切に教えてもらえました！
そこで教えてもらった通り、 hook_add から hook_source に変更。
こんな感じ。
 dein.toml  [[plugins]] repo = &#39;thinca/vim-singleton&#39; if = &amp;quot;!has(&#39;nvim&#39;)&amp;quot; hook_source = &#39;&#39;&#39; call singleton#enable() &#39;&#39;&#39;  それから、 lazy でないプラグインは、 hook_source は動かないため、 dein のドキュメントに書いてあるように dein#call_hook(&#39;source&#39;) を手動で呼ぶ必要がある。
 init.vim  set shellslash if has(&#39;nvim&#39;) let $VIM_PATH = expand(&#39;~/.</description>
    </item>
    
    <item>
      <title>js beautify with vim</title>
      <link>http://yukimemi.github.io/post/2016-10-09_js-beautify-with-vim/</link>
      <pubDate>Sun, 09 Oct 2016 11:23:19 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-10-09_js-beautify-with-vim/</guid>
      <description>vimでjavascriptを書くときの設定。
 dein.toml  # ==================== Filetype (javascript) ===== {{{1 [[plugins]] repo = &#39;pangloss/vim-javascript&#39; on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;] [[plugins]] repo = &#39;maxmellon/vim-jsx-pretty&#39; on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;] [[plugins]] repo = &#39;othree/javascript-libraries-syntax.vim&#39; on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;] [[plugins]] repo = &#39;othree/es.next.syntax.vim&#39; on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;] # ==================== Utility =================== {{{1 [[plugins]] repo = &#39;Chiel92/vim-autoformat&#39; hook_add = &#39;&#39;&#39; let g:autoformat_autoindent = 0 let g:autoformat_retab = 0 let g:autoformat_remove_trailing_spaces = 0 au MyAutoCmd BufWrite *.</description>
    </item>
    
    <item>
      <title>Use solarized colorscheme in true color</title>
      <link>http://yukimemi.github.io/post/2016-09-19_use-solarized-colorscheme-in-true-color/</link>
      <pubDate>Mon, 19 Sep 2016 11:15:50 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-19_use-solarized-colorscheme-in-true-color/</guid>
      <description>前回の記事(True color in iTerm2 Tmux Neovim | YUKIMEMI)で、 iterm と neovim でtrue colorを使う方法はわかったんだけど、なぜか、 solarized の colorscheme が有効にならなかった。
通常の solarized ではダメなようで、true color対応したやつを使えばいいみたい。
[[plugins]] repo = &#39;lifepillar/vim-solarized8&#39;  colorscheme solarized8_dark  これでできた。
参考 tmux on iTerm2 で斜体 &amp;amp; True Color を使う - Qiita</description>
    </item>
    
    <item>
      <title>True color in iTerm2 Tmux Neovim</title>
      <link>http://yukimemi.github.io/post/2016-09-19_true-color-in-iterm2-tmux-neovim/</link>
      <pubDate>Mon, 19 Sep 2016 00:30:00 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-19_true-color-in-iterm2-tmux-neovim/</guid>
      <description>今時 macbook のキレイな画面で256色なんて・・・
っということで、 True color が使えるそうなので設定してみた。
まず、 iTerm2 の設定。
は特になく、 homebrew cask でインストールすればそのまま true color が使えるらしい。
$ brew cask install iterm2  次に tmux の設定。 tmux はバージョン 2.2 以上ならOKっぽい。普通に homebrew でインストールしたら 2.2 だった。
$ brew install tmux  で、設定ファイル tmux.conf に以下を追加。
set -ga terminal-overrides &amp;quot;,xterm-256color:Tc&amp;quot;  もし、以下の設定が書いてあったらコメントアウト。
# set -g default-terminal xterm-256color  それから、 neovim の設定 ( init.vim )。
if has(&#39;nvim&#39;) set termguicolors endif  これでOK。 昔の設定は、 let $NVIM_TUI_ENABLE_TRUE_COLOR=1 とかだったらしいけど、2016/5/11から変わったっぽい。</description>
    </item>
    
    <item>
      <title>flowtype in vim</title>
      <link>http://yukimemi.github.io/post/2016-09-18_flowtype-in-vim/</link>
      <pubDate>Sun, 18 Sep 2016 13:03:18 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-09-18_flowtype-in-vim/</guid>
      <description>最近 flowtype という Altjs があるのを知った。
facebookが作っているらしく、 typescript と違って、既存のjavascriptをそのまま使うことも出来、型エラーがあってもコンパイル、実行が出来る。
導入は npm で簡単にインストール出来る。
$ npm i -g flow-bin  flowtype 自体の説明は 型なき世界のためのflowtype入門 - Qiita とか、公式の Flow | A static type checker for JavaScript とか見ればいいと思う。
んで、公式にも書いてあるように、vimやemacsのプラギンが提供されている。
flowtype/vim-flow: A vim plugin for Flow
neovim dein でのインストール手順。 toml を使っている前提。
[[plugins]] repo = &#39;flowtype/vim-flow&#39; on_ft = [&#39;javascript&#39;, &#39;javascript.jsx&#39;] build = &#39;npm install -g flow-bin&#39; hook_add = &#39;&#39;&#39; let g:flow#autoclose = 1 &#39;&#39;&#39; [[plugins]] repo = &#39;Shougo/deoplete.</description>
    </item>
    
    <item>
      <title>Mapping with &lt;nowait&gt; option in vim</title>
      <link>http://yukimemi.github.io/post/2016-08-09_mapping-with-nowait-option-in-vim/</link>
      <pubDate>Tue, 09 Aug 2016 09:58:11 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2016-08-09_mapping-with-nowait-option-in-vim/</guid>
      <description>vim でマッピングをする時に、便利なオプションがあることを最近知った。
それが &amp;lt;nowait&amp;gt; オプション。
例えば、よくやるキーマップの例としてこんなのがある。
nnoremap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;  エスケープ2回でハイライト消すっていうマッピング。
だけど、これを設定した状態で、コマンドウィンドウを &amp;lt;ESC&amp;gt; で閉じたい場合、&amp;lt;ESC&amp;gt; を押下しても、次のマッピングを待っている状態になってしまって、すぐに閉じることができない。
こんなマッピングをした場合。
au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;  この場合に、 &amp;lt;nowait&amp;gt; というオプションを追加することで、 &amp;lt;ESC&amp;gt; を押下したらすぐにコマンドウィンドウを閉じることができる。
au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt;  めちゃめちゃ便利。
僕の場合、コマンドウィンドウと、Uniteを閉じるのにこのオプションを使っている。
こんな感じ。
&amp;quot; Cmdwin. nnoremap : q:i vnoremap : q:A &amp;quot; nohlsearch. nnoremap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt; &amp;quot; Escape cmd win. au MyAutoCmd CmdwinEnter * nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt;&amp;lt;nowait&amp;gt; &amp;lt;ESC&amp;gt; :q&amp;lt;CR&amp;gt; &amp;quot; Escape unite.</description>
    </item>
    
    <item>
      <title>Super saiya Vim !</title>
      <link>http://yukimemi.github.io/post/2015-09-23_super-saiya-vim-/</link>
      <pubDate>Wed, 23 Sep 2015 14:54:51 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-09-23_super-saiya-vim-/</guid>
      <description>Vimでも超サイヤ人になりたい！
ってなわけでやってみた。
経緯としては、Windows環境でvimの起動がかなり遅かったため。
vimに導入したプラグイン数が多くなりすぎていたため、起動に時間がかかっていた。 そこで、起動時には基本的なプラグインのみ読み込み、後から必要に応じてpluginを追加で読み込むようにしてみた。
if has(&#39;vim_starting&#39;) if &amp;amp;compatible set nocompatible endif set runtimepath+=~/.cache/neobundle/neobundle.vim endif call neobundle#begin(expand(&#39;~/.cache/neobundle&#39;)) if neobundle#load_cache() call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle_base.toml&#39;) call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy_base.toml&#39;, {&#39;lazy&#39; : 1}) NeoBundleSaveCache endif call neobundle#end() filetype plugin indent on nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;s :&amp;lt;C-u&amp;gt;call &amp;lt;SID&amp;gt;loadAllPlugins()&amp;lt;CR&amp;gt; function! s:loadAllPlugins() call neobundle#append() call neobundle#load_toml(&#39;~/.vim/vim.d/neobundle.toml&#39;) call neobundle#load_toml(&#39;~/.vim/vim.d/neobundlelazy.toml&#39;, {&#39;lazy&#39; : 1}) call neobundle#end() filetype plugin indent on source ~/.vim/vim.d/05_pluginsetting.vim echom &amp;quot;Suuuuuuuuuper !!!!!!!&amp;quot; endfunction  これで、起動時は最小限のpluginで爆速起動し、必要な時に &amp;lt;Space&amp;gt;s を押下することで超サイヤVimになれる。(全pluginをロードする)
遅かったWindows環境ではまだ試せていないが、New MacBook 12では、0.2sくらいの起動時間が0.15sにまで短縮された・・・！</description>
    </item>
    
    <item>
      <title>Mayu for IME off in vim</title>
      <link>http://yukimemi.github.io/post/2015-05-02_mayu-for-ime-off-in-vim/</link>
      <pubDate>Sat, 02 May 2015 22:59:12 +0900</pubDate>
      
      <guid>http://yukimemi.github.io/post/2015-05-02_mayu-for-ime-off-in-vim/</guid>
      <description>vimを使っていて困るのがIMEの制御。特に、ノーマルモードに戻った時に自動でIMEがOFFになってくれないと、画面に「jっっっｘ」とかがあふれる。 Macでは、「karabiner」というソフトを使って、「Escape」もしくは、「Ctrl + [」を押下した時に自動でIMEをOFFにすることが出来ていた。
Linuxでも同じことが出来ないかといろいろググってはみたものの、意外とこれ！ってのが見つからない。 そんな中、一応要望を満たせるのが、「Mayu」というソフトだった。
Windowsで「窓使いの憂鬱」と呼ばれてたソフトで、Linuxにも対応してるっぽい。
設定自体は単純なんだけど、キーボードのキーコードを全部定義しなきゃいけないみたいで、それがめんどくさそうだった。 幸いにも、全部をスキャンしたファイルをアップしてくれている人がいたので、使用させてもらった。 一部、MacBookAirのキーコードに対応していなかったものがあったため、少し改変している。
Mayuのインストール Mayuはソースコードのみ配布されているので、自分でビルドする必要がある。 Ubuntu 15.04では以下の通りにやるとビルド出来た。
$ ghq get https://github.com/kenhys/mayu.git $ cd ~/.ghq/src/github.com/kenhys/mayu $ sudo aptitude install build-essential libboost-iostreams-dev libudev-dev libusb-1.0-0-dev $ ./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu/ $ make $ sudo make install $ sudo chmod +s /usr/local/bin/mayu  mayuはroot権限で実行する必要があり、systemd経由で自動起動させるためにsetuidをたてている。 本当はvisudoとかでmayuのみパスワードなしsudo出来るようにしたりとかのがいいのかもしれないけど、めんどくさいので・・・。
fcitx設定 今回やりたいのは、「Escape」を押下した時にIMEをオフにする、もしくは「Crtl-[」を押下した時にIMEをオフにするということ。 前提として、Ubuntu 15.04では、IMEとしてfcitx-mozcを使用している。
それから、fcitxの設定で、「入力メソッドをオンに」を「Hangul」(かなキー)、入力メソッドをオフ」に「Hangulhanja」(英数キー)を割り当てる。
Mayu設定 次に、mayuの設定を書く。上記のようにfcitxの設定をしているのであれば、mayuの設定としては以下の通り。
def key Esc Escape = 0x01 def key Eisu = 0x7b key Esc = Esc Eisu key C-OpenBracket = C-OpenBracket Eisu  「Escape」が押された時に、「Escape」、「英数」を押し、「Ctrl-[」が押された時に、「Ctrl-[」、「英数」を押すという設定。</description>
    </item>
    
    <item>
      <title>Set cursorline as needed</title>
      <link>http://yukimemi.github.io/post/2014-08-05_set-cursorline-as-needed/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-08-05_set-cursorline-as-needed/</guid>
      <description>これまで、 &amp;lsquo;cursorline&amp;rsquo; を必要な時にだけ有効にする - 永遠に未完成 を参考に、cursorlineの設定をしていたけど、時々cursorlineがずっと表示されたままになる現象が発生していた。
よくよく調べてみると、一度 CursorHold イベントを発生させ(set cursorline)、その後に別Windowへ移動し、さらに &amp;lt;C-^&amp;gt; でもとのバッファに戻ったときに、 s:cursorline_lock 変数が「0」のままとなり、その後 CursorMoved イベントが発生してもずっと set nocursorline されなくなるようだった。
そこで、 Lingr のvim部屋で初めて質問してみた。
そしたらあっさりと答えを教えてもらえた。vimmerは思ってたよりこわくなかった。よかた。
&amp;lt;C-^&amp;gt; では、 WinEnter イベントは発生しないが、 BufEnter イベントは発生するらしい。 また、僕は、 nnoremap : q:i のようにして、コマンドラインウィンドウを使うようにしているのだが、この場合も上記と同様に、cursorlineがずっと消えない事象が発生していた。 そこで、thincaさんの 設定 を以下のように、変更した。
au MyAutoCmd CursorMoved,CursorMovedI * call s:auto_cursorline(&#39;CursorMoved&#39;) au MyAutoCmd CursorHold,CursorHoldI * call s:auto_cursorline(&#39;CursorHold&#39;) au MyAutoCmd WinEnter,BufEnter,CmdwinLeave * call s:auto_cursorline(&#39;WinEnter,BufEnter,CmdwinLeave&#39;) au MyAutoCmd WinLeave * call s:auto_cursorline(&#39;WinLeave&#39;) let s:cursorline_lock = 0 function! s:auto_cursorline(event) if a:event ==# &#39;WinEnter,BufEnter,CmdwinLeave&#39; setlocal cursorline setlocal cursorcolumn let s:cursorline_lock = 2 elseif a:event ==# &#39;WinLeave&#39; setlocal nocursorline setlocal nocursorcolumn elseif a:event ==# &#39;CursorMoved&#39; if s:cursorline_lock if 1 &amp;lt; s:cursorline_lock let s:cursorline_lock = 1 else setlocal nocursorline setlocal nocursorcolumn let s:cursorline_lock = 0 endif endif elseif a:event ==# &#39;CursorHold&#39; if &amp;amp;updatetime &amp;gt;= 4000 setlocal cursorline setlocal cursorcolumn endif let s:cursorline_lock = 1 endif endfunction  ついでに cursorcolumn も追加しといた。 また、 TweetVim や、 calendar.</description>
    </item>
    
    <item>
      <title>vim で powershell を書く！</title>
      <link>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-02-08-powershell_make_cmd/</guid>
      <description>この記事は、 Vim Advent Calendar 2013 70日目の記事になります。
vim で powershell を書く時の設定です。
まず、 syntax と indent 。 これは、以下のプラグインでOK。(なんかインデントは変だけど・・・)
NeoBundleLazy &#39;PProvost/vim-ps1&#39;  それから、 vim から実行するために、 quickrun を入れます。(これは定番ですね！)
NeoBundleLazy &#39;thinca/vim-quickrun&#39;  ちょっと前までは、powershell でquickrunするためには、設定が必要だったけど、最近オフィシャルに対応されるようになったみたいです。
参考: VimとPowerShell - Qiita
これで、powershellを書いてる時に、デフォルトだと &amp;lt;Leader&amp;gt;r で実行できます。
さらに、おもむろに以下のファイルを作成して、 header.cmd というファイル名で保存。
@echo off pushd &amp;quot;%~dp0&amp;quot; &amp;gt; nul set tm=%time: =0% set ps1file=%~n0___%date:~-10,4%%date:~-5,2%%date:~-2,2%_%tm:~0,2%%tm:~3,2%%tm:~6,2%%tm:~9,2%.ps1 for /f &amp;quot;usebackq skip=10 delims=&amp;quot; %%i in (&amp;quot;%~f0&amp;quot;) do @echo %%i &amp;gt;&amp;gt; &amp;quot;%ps1file%&amp;quot; powershell -NoProfile -ExecutionPolicy unrestricted -File &amp;quot;%ps1file%&amp;quot; %* del &amp;quot;%ps1file%&amp;quot; popd &amp;gt; nul pause exit /b %ERRORLEVEL% # ========== do ps1 file as a dosbatch ==========  そして、以下の設定を .</description>
    </item>
    
    <item>
      <title>vim indentLine で見やすいインデントを</title>
      <link>http://yukimemi.github.io/post/2014-01-18-vim_indentline/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2014-01-18-vim_indentline/</guid>
      <description>vim には、見やすい定番のインデントプラグインとして、 nathanaelkane/vim-indent-guides がある。
しかし、最近、 Yggdroot/indentLine というプラグイン が、 オススメなVimのプラグイン紹介 - RailsとRubyとVimのブログ で紹介されていたので、乗り換えた。
シンプルでかっこいい。 それに、 vim-indent-guides は、 indent をタブで記述してあるファイルの時の表示がタブ全部が色塗られてしまって見難い。
個人的にはタブを使用することはなくて、スペースを使用するから問題ないのだけれども・・・。
その点、 indentLine では、スペースしか対応してなく、タブの場合は何もしない。
README にも記載があるが、タブで同じことやるためには、 .vimrc に、以下の記載を加えればいい。
set list listchars=tab:\¦\  最後にスペースが入っていることに注意。
こうすると、スペースの場合とほぼ同じように表示される。
ただ、一つ目のインデントからも表示されるのが不満。2行目からのみ表示されるように出来ないものか・・・。
また、インデントを除外したい場合は、その filetype を設定してやればいいみたい。
let g:indentLine_fileTypeExclude = [&#39;help&#39;, &#39;nerdtree&#39;, &#39;calendar&#39;, &#39;thumbnail&#39;, &#39;tweetvim&#39;]  こんな感じ。</description>
    </item>
    
    <item>
      <title>vim-automatic &lt;C-[&gt;&lt;C-[&gt; でウィンドウクローズ</title>
      <link>http://yukimemi.github.io/post/2013-09-15-automatic_vim/</link>
      <pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-09-15-automatic_vim/</guid>
      <description>automatic.vim という便利なプラギンがある。
これを利用すると、 Unite や QuickFix や help など、様々なウィンドウを一元管理出来るっぽい。
そこで、いろんなサイトを参考にやってみた。
&amp;quot; ESC2回押しで検索ハイライトを消去 autocm MyAutoCmd VimEnter,WinEnter,WinLeave * nmap &amp;lt;silent&amp;gt; &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;&amp;lt;Plug&amp;gt;(anzu-clear-search-status) &amp;quot; vim-automatic {{{ function! s:my_temporary_window_init(config, context) silent! nunmap &amp;lt;ESC&amp;gt;&amp;lt;ESC&amp;gt; nmap &amp;lt;buffer&amp;gt; &amp;lt;C-[&amp;gt; :&amp;lt;C-u&amp;gt;q&amp;lt;CR&amp;gt; nmap &amp;lt;buffer&amp;gt; &amp;lt;ESC&amp;gt; :&amp;lt;C-u&amp;gt;q&amp;lt;CR&amp;gt; endfunction let g:automatic_default_match_config = { \ &#39;is_open_other_window&#39;: 1 \ } let g:automatic_default_set_config = { \ &#39;height&#39;: &#39;60%&#39;, \ &#39;move&#39;: &#39;bottom&#39;, \ &#39;apply&#39;: function(&#39;s:my_temporary_window_init&#39;) \ } let g:automatic_config = [ \ {&#39;match&#39;: {&#39;buftype&#39;: &#39;help&#39;}}, \ {&#39;match&#39;: {&#39;bufname&#39;: &#39;^.</description>
    </item>
    
    <item>
      <title>qfixhowm Vim でメモ</title>
      <link>http://yukimemi.github.io/post/2013-06-29-qfixhowm/</link>
      <pubDate>Sat, 29 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://yukimemi.github.io/post/2013-06-29-qfixhowm/</guid>
      <description>vimでメモをとる場合、簡単な設定では vimrc に JunkFile コマンドを定義するなどする。
&amp;quot; JunkFile {{{ &amp;quot; http://vim-users.jp/2010/11/hack181/ &amp;quot;&amp;quot; Open junk file. command! -nargs=0 JunkFile call s:open_junk_file() function! s:open_junk_file() let l:junk_dir = $HOME . &#39;/.vim_junk&#39;. strftime(&#39;/%Y/%m&#39;) if !isdirectory(l:junk_dir) call mkdir(l:junk_dir, &#39;p&#39;) endif let l:filename = input(&#39;Junk Code: &#39;, l:junk_dir.strftime(&#39;/%Y-%m-%d-%H%M%S.&#39;)) if l:filename != &#39;&#39; execute &#39;edit &#39; . l:filename endif endfunction &amp;quot; }}}  これは実行時に拡張子が自由に設定出来るので、簡単にスクリプトを試してみたい場合 はとても便利。
でも、やっぱり最近、メモは統合的に管理したいと思い、 QfixHowm を導入することにした。
インストール Neobundle で一発
NeoBundle &#39;fuenor/qfixgrep&#39; NeoBundle &#39;fuenor/qfixhowm&#39;  qfixgrep もいれとくと何かといいみたい。</description>
    </item>
    
  </channel>
</rss>